gcp_credentials: ENCRYPTED[!149d4005ecdba4cdd78bb5ba22756ebb98bf8e3367ee2e9ab08c5a1608c0d3e3b501904b67a1d67c0b63085e469d7dde!]

env:
  CIRRUS_VAULT_URL: https://vault.sonar.build:8200
  CIRRUS_VAULT_AUTH_PATH: jwt-cirrusci
  CIRRUS_VAULT_ROLE: cirrusci-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}

  ARTIFACTORY_URL: VAULT[development/kv/data/repox data.url]
  ARTIFACTORY_PRIVATE_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader
  ARTIFACTORY_PRIVATE_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  ARTIFACTORY_DEPLOY_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer
  ARTIFACTORY_DEPLOY_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer access_token]
  ARTIFACTORY_DEPLOY_REPO: sonarsource-public-qa
  ARTIFACTORY_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  GITHUB_TOKEN: VAULT[development/github/token/licenses-ro token]
  # burgr notification
  BURGR_URL: VAULT[development/kv/data/burgr data.url]
  BURGR_USERNAME: VAULT[development/kv/data/burgr data.cirrus_username]
  BURGR_PASSWORD: VAULT[development/kv/data/burgr data.cirrus_password]

  # Use bash (instead of sh on linux or cmd.exe on windows)
  CIRRUS_SHELL: bash

container_definition: &CONTAINER_DEFINITION
  builder_image_project: release-engineering-ci-prod
  builder_image_name: family/docker-builder
  cluster_name: cirrus-ci
  zone: europe-west4-b
  namespace: default
  use_in_memory_disk: true

maven_cache_definition: &MAVEN_CACHE
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
    fingerprint_script: cat **/pom.xml

win_vm_definition: &WINDOWS_VM_DEFINITION
  gce_instance:
    image_project: release-engineering-ci-prod
    image_family: lt-base-windows-jdk11
    platform: windows
    zone: europe-west3-a
    preemptible: false
    disk: 128
    type: c2-standard-8
    use_ssd: true

only_sonarsource_qa: &ONLY_SONARSOURCE_QA
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && ($CIRRUS_PR != "" || $CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH =~ "branch-.*" || $CIRRUS_BRANCH =~ "dogfood-on-.*")

plugin_qa_body: &PLUGIN_QA_BODY
  depends_on:
    - build
  <<: *ONLY_SONARSOURCE_QA
  gke_container:
    dockerfile: .cirrus/nodejs.Dockerfile
    <<: *CONTAINER_DEFINITION
    cpu: 15
    memory: 30G
  env:
    CIRRUS_CLONE_DEPTH: 10
    SONARSOURCE_QA: true
  <<: *MAVEN_CACHE
  node_version_script:
    - node -v
  qa_script:
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - mvn -f its/plugin/pom.xml -Dsonar.runtimeVersion=${SQ_VERSION} -B -e -V verify surefire-report:report
  cleanup_before_cache_script: cleanup_maven_repository
  always:
    surefire_report_artifacts:
      path: "its/plugin/tests/target/site/**/*"
      type: text/html
    surefire_artifacts:
      path: "its/plugin/tests/target/surefire-reports/**/*"
      type: text/xml

build_task:
  gke_container:
    dockerfile: .cirrus/nodejs.Dockerfile
    <<: *CONTAINER_DEFINITION
    cpu: 15
    memory: 30G
  env:
    # analysis on next
    SONAR_TOKEN: VAULT[development/kv/data/next data.token]
    SONAR_HOST_URL: https://next.sonarqube.com/sonarqube
    #allow deployment of pull request artifacts to repox
    DEPLOY_PULL_REQUEST: true
    #sign artifacts
    SIGN_KEY: VAULT[development/kv/data/sign data.key]
    PGP_PASSPHRASE: VAULT[development/kv/data/sign data.passphrase]
  <<: *MAVEN_CACHE
  sonar_cache:
    folder: ${HOME}/.sonar/cache
    fingerprint_script:
      - echo ${CIRRUS_OS}
      - curl --silent ${SONAR_HOST_URL}/deploy/plugins/index.txt | sort
  build_script:
    - source cirrus-env BUILD
    - npm config set registry "${ARTIFACTORY_URL}/api/npm/npm"
    - regular_mvn_build_deploy_analyze
  cleanup_before_cache_script: cleanup_maven_repository


build_win_task:
  depends_on:
    - build
  <<: *WINDOWS_VM_DEFINITION
  <<: *ONLY_SONARSOURCE_QA
  <<: *MAVEN_CACHE
  build_script:
    - source cirrus-env CI
    - npm config set registry "${ARTIFACTORY_URL}/api/npm/npm"
    - mvn test
  cleanup_before_cache_script: cleanup_maven_repository

ws_scan_task:
  depends_on:
    - build
  gke_container:
    dockerfile: .cirrus/nodejs.Dockerfile
    <<: *CONTAINER_DEFINITION
    cpu: 4
    memory: 8G
  # run only on master and long-term branches
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && ($CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH =~ "branch-.*")
  env:
    WS_APIKEY: VAULT[development/kv/data/mend data.apikey]
  <<: *MAVEN_CACHE
  whitesource_script:
    - source cirrus-env QA
    - npm config set registry "${ARTIFACTORY_URL}/api/npm/npm"
    - source set_maven_build_version $BUILD_NUMBER
    - mvn clean install -DskipTests
    - source ws_scan.sh
  allow_failures: "true"
  always:
    ws_artifacts:
      path: "whitesource/**/*"

plugin_qa_task:
  <<: *PLUGIN_QA_BODY
  gke_container:
    docker_arguments:
      matrix:
        - NODE_VERSION: v14.20.0
        - NODE_VERSION: v16.16.0
        - NODE_VERSION: v18.6.0
  env:
    SQ_VERSION: LATEST_RELEASE


plugin_qa_sq_dev_task:
  <<: *PLUGIN_QA_BODY
  env:
    SQ_VERSION: DEV

# Plugin QA for Windows is splint into 2 parts to make it faster
plugin_qa_win_task:
  depends_on:
    - build
  <<: *WINDOWS_VM_DEFINITION
  <<: *ONLY_SONARSOURCE_QA
  env:
    SONARSOURCE_QA: true
    SQ_VERSION: LATEST_RELEASE
    matrix:
      - TEST: "!CoverageTest,!TypeScriptAnalysisTest,!EslintBasedRulesTest,!SonarLintTest"
      - TEST: "CoverageTest,TypeScriptAnalysisTest,EslintBasedRulesTest,SonarLintTest"
  <<: *MAVEN_CACHE
  qa_script:
    - source /c/buildTools-docker/bin/cirrus-env QA
    - source /c/buildTools-docker/bin/set_maven_build_version $BUILD_NUMBER
  # building the custom plugin required for the further tests
    - mvn clean package -f its/plugin/plugins/pom.xml
    - mvn -f its/plugin/tests/pom.xml -Dsonar.runtimeVersion=${SQ_VERSION} "-Dtest=${TEST}" -B -e -V verify surefire-report:report
  cleanup_before_cache_script: cleanup_maven_repository
  always:
    surefire_report_artifacts:
      path: "its/plugin/tests/target/site/**/*"
      type: text/html
    surefire_artifacts:
      path: "its/plugin/tests/target/surefire-reports/**/*"
      type: text/xml

ruling_task:
  depends_on:
    - build
  <<: *ONLY_SONARSOURCE_QA
  gke_container:
    matrix:
      - dockerfile: .cirrus/nodejs.Dockerfile
    <<: *CONTAINER_DEFINITION
    cpu: 15
    memory: 24G
  env:
    CIRRUS_CLONE_DEPTH: 10
    SONARSOURCE_QA: true
    matrix:
      - RULING: JavaScriptRulingTest
      - RULING: TypeScriptRulingTest
      - RULING: CssRulingTest
  <<: *MAVEN_CACHE
  submodules_script:
    - git submodule update --init
  ruling_script:
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - cd its/ruling
    - mvn verify -Dtest=${RULING} -Dsonar.runtimeVersion=LATEST_RELEASE -Dmaven.test.redirectTestOutputToFile=false -Djunit.jupiter.execution.parallel.config.dynamic.factor=1 -B -e -V
  cleanup_before_cache_script: cleanup_maven_repository
  on_failure:
    diff_artifacts:
      path: "**/target/actual/**/*"


promote_task:
  depends_on:
    - ws_scan
    - build_win
    - plugin_qa
    - plugin_qa_sq_dev
    - plugin_qa_win
    - ruling
  <<: *ONLY_SONARSOURCE_QA
  gke_container:
    dockerfile: .cirrus/nodejs.Dockerfile
    <<: *CONTAINER_DEFINITION
    cpu: 1
    memory: 1G
  env:
    #promotion cloud function
    GCF_ACCESS_TOKEN: VAULT[development/kv/data/promote data.token]
    PROMOTE_URL: VAULT[development/kv/data/promote data.url]
    GITHUB_TOKEN: VAULT[development/github/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promotion token]
    #artifacts that will have downloadable links in burgr
    ARTIFACTS: org.sonarsource.javascript:sonar-javascript-plugin:jar
  <<: *MAVEN_CACHE
  script: cirrus_promote_maven
  cleanup_before_cache_script: cleanup_maven_repository
