env:
  CIRRUS_VAULT_URL: https://vault.sonar.build:8200
  CIRRUS_VAULT_AUTH_PATH: jwt-cirrusci
  CIRRUS_VAULT_ROLE: cirrusci-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}

  ARTIFACTORY_URL: https://repox.jfrog.io/artifactory
  ARTIFACTORY_PRIVATE_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader
  ARTIFACTORY_PRIVATE_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  ARTIFACTORY_DEPLOY_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer
  ARTIFACTORY_DEPLOY_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer access_token]
  ARTIFACTORY_DEPLOY_REPO: sonarsource-public-qa
  ARTIFACTORY_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  GITHUB_TOKEN: VAULT[development/github/token/licenses-ro token]

  # Use bash (instead of sh on linux or cmd.exe on windows)
  CIRRUS_SHELL: bash

container_definition: &CONTAINER_DEFINITION
  cluster_name: ${CIRRUS_CLUSTER_NAME}
  builder_role: cirrus-builder
  builder_image: docker-builder-v*
  builder_instance_type: t3.small
  builder_subnet_id: ${CIRRUS_AWS_SUBNET}
  region: eu-central-1
  namespace: default
  use_in_memory_disk: true
  cpu: 10
  memory: 40G

maven_cache_definition: &MAVEN_CACHE
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
    fingerprint_script: cat **/pom.xml

orchestrator_cache_preparation_definition: &ORCHESTRATOR_CACHE
  set_orchestrator_home_script: |
    export TODAY=$(date '+%Y-%m-%d')
    echo "TODAY=${TODAY}" >> $CIRRUS_ENV
    echo "ORCHESTRATOR_HOME=${CIRRUS_WORKING_DIR}/orchestrator/${TODAY}" >> $CIRRUS_ENV
  mkdir_orchestrator_home_script: |
    echo "Create dir ${ORCHESTRATOR_HOME} if needed"
    mkdir -p ${ORCHESTRATOR_HOME}
  orchestrator_cache:
    folder: ${ORCHESTRATOR_HOME}
    fingerprint_script: echo ${TODAY}
    reupload_on_changes: 'true'

nodejs_runtimes_cache_definition: &RUNTIME_CACHE
  runtime_cache:
    folder: tools/fetch-node/downloads/
    fingerprint_script: cat tools/fetch-node/node-distros.mjs

win_vm_definition: &WINDOWS_VM_DEFINITION
  ec2_instance:
    experimental: true # see https://github.com/cirruslabs/cirrus-ci-docs/issues/1051
    image: base-windows-jdk17-v*
    platform: windows
    region: eu-central-1
    type: c6id.4xlarge
    subnet_id: ${CIRRUS_AWS_SUBNET}
    preemptible: false
    use_ssd: true

npmrc_script_definition: &NPMRC_SCRIPT_DEFINITION
  npmrc_script:
    - cp .cirrus/npmrc $CIRRUS_WORKING_DIR/.npmrc
    - cp .cirrus/npmrc $CIRRUS_WORKING_DIR/packages/jsts/src/rules/.npmrc
    - cp .cirrus/npmrc $CIRRUS_WORKING_DIR/its/eslint8-plugin-sonarjs/.npmrc
    - cp .cirrus/npmrc $CIRRUS_WORKING_DIR/its/eslint9-plugin-sonarjs/.npmrc

win_ssd_and_clone:
  &WIN_SSD_AND_CLONE # copy&paste from https://github.com/SonarSource/sonar-cpp/blob/a8c6f1e45a12393508682a013ac7ee35eb92bece/.cirrus.yml#L45
  prepare_disk_script:
    - ps: |
        Get-Disk -Number 2 | Initialize-Disk -PassThru | New-Partition -UseMaximumSize -DriveLetter Z
        Format-Volume -DriveLetter Z -FileSystem NTFS -Confirm:$false
    - echo "CIRRUS_WORKING_DIR=Z:/cirrus-ci-build" >> $CIRRUS_ENV
  # we don't clone submodules because they are not needed for the tests
  clone_script: |
    git config --system core.longpaths true
    if [ -z "$CIRRUS_PR" ]; then
      git clone --branch=$CIRRUS_BRANCH https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR
      git reset --hard $CIRRUS_CHANGE_IN_REPO
    else
      git clone https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR
      git fetch origin pull/$CIRRUS_PR/head:pull/$CIRRUS_PR
      git reset --hard $CIRRUS_CHANGE_IN_REPO
    fi

only_sonarsource_qa: &ONLY_SONARSOURCE_QA
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && ($CIRRUS_PR != "" || $CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH =~ "branch-.*" || $CIRRUS_BRANCH =~ "dogfood-on-.*")

plugin_qa_body: &PLUGIN_QA_BODY
  depends_on:
    - build
  <<: *ONLY_SONARSOURCE_QA
  eks_container:
    <<: *CONTAINER_DEFINITION
  env:
    CIRRUS_CLONE_DEPTH: 10
    SONARSOURCE_QA: true
  <<: *MAVEN_CACHE
  <<: *ORCHESTRATOR_CACHE
  qa_script:
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - mvn -f its/plugin/pom.xml -Dsonar.runtimeVersion=${SQ_VERSION} ${MVN_TEST} -B -e -V verify surefire-report:report
  cleanup_before_cache_script: cleanup_maven_repository

eslint_plugin_test_task:
  eks_container:
    <<: *CONTAINER_DEFINITION
    dockerfile: .cirrus/nodejs.Dockerfile
    docker_arguments:
      CIRRUS_AWS_ACCOUNT: ${CIRRUS_AWS_ACCOUNT}
      NODE_VERSION: 20
  env:
    CIRRUS_CLONE_DEPTH: 1
    SONARSOURCE_QA: true
  <<: *MAVEN_CACHE
  <<: *NPMRC_SCRIPT_DEFINITION
  # needed because we need to build the plugin
  <<: *RUNTIME_CACHE
  eslint_its_script:
    - . ~/.profile
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - cd packages/jsts/src/rules
    - npm run build
    - cd ../../../../its/eslint8-plugin-sonarjs
    - npm run build
    - npx tsc --noEmit # check typings for tseslint.config.ts
    - npm run test
    - cd ../eslint9-plugin-sonarjs
    - npm run build
    - npx tsc --noEmit # check typings for tseslint.config.ts
    - npm run test
