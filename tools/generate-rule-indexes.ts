/*
 * SonarQube JavaScript Plugin
 * Copyright (C) 2011-2024 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

import { readdir, writeFile } from 'fs/promises';
import { join } from 'node:path/posix';
import { pathToFileURL } from 'node:url';

function toUnixPath(path: string) {
  return path.replace(/[\\/]+/g, '/');
}

const header = `/*
 * SonarQube JavaScript Plugin
 * Copyright (C) 2011-2024 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */`;

const RULES_FOLDER = join(toUnixPath(import.meta.dirname), '../packages/jsts/src/rules/');
const ruleRegex = /^S\d+$/;

const allRules: string[] = [];
const pluginRules: string[] = [];
const eslintIds: Record<string, string> = {};

const files = await readdir(RULES_FOLDER, { withFileTypes: true });
for (const file of files) {
  if (ruleRegex.test(file.name) && file.isDirectory()) {
    const metadata = await import(
      pathToFileURL(join(RULES_FOLDER, file.name, 'meta.js')).toString()
    );
    eslintIds[metadata.sonarKey] = metadata.eslintId;
    allRules.push(metadata.sonarKey);
    if (metadata.implementation === 'original') {
      pluginRules.push(metadata.sonarKey);
    }
  }
}

const sonarKeySorter = (a, b) => (parseInt(a.substring(1)) < parseInt(b.substring(1)) ? -1 : 1);

await writeFile(
  join(RULES_FOLDER, './rules.ts'),
  `${header}\n\n// DO NOT EDIT! This file was generated by generate-rule-indexes.ts\n${allRules
    .sort(sonarKeySorter)
    .map(id => `export { rule as ${id} } from './${id}/index.js'; // ${eslintIds[id]} \n`)
    .join('')}`,
);

//sort once;
pluginRules.sort(sonarKeySorter);

await writeFile(
  join(RULES_FOLDER, './plugin-rules.ts'),
  `${header}\n\n// DO NOT EDIT! This file was generated by generate-rule-indexes.ts\n
${pluginRules.map(id => `import { rule as ${id} } from './${id}/index.js';\n`).join('')}
export const rules = {${pluginRules.map(id => `  "${eslintIds[id]}": ${id},\n`).join('')}};\n`,
);
