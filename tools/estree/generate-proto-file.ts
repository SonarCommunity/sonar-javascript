/*
 * SonarQube JavaScript Plugin
 * Copyright (C) 2011-2023 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
import fs from 'node:fs';
import path from 'node:path';
import {
  ESTreeNode,
  lowerCaseFirstLetter,
  PrimitiveFieldValue,
  TOP_LEVEL_NODE,
} from './get-estree-nodes';

const packageJson = require(path.join('..', '..', 'package.json'));
const typesVersion = packageJson.devDependencies['@types/estree'];

export function addHandWrittenMessages(messages: Record<string, ESTreeNode>) {
  // We create manually the top level node "BaseNodeWithoutComments", holding all the other nodes. The name is taken directly from the index.d.ts file.
  // While we could generate this node with the same logic as the one used for all nodes, we do it manually as there would be too many edge cases to handle.
  const allNodeTypesAsFields = Object.keys(messages).map(nodeType => {
    return { name: lowerCaseFirstLetter(nodeType), fieldValue: { type: nodeType } };
  });
  messages[TOP_LEVEL_NODE] = {
    name: TOP_LEVEL_NODE,
    fields: [
      { name: 'type', fieldValue: { type: 'string' } },
      // SourceLocation will be generated by the logic.
      { name: 'loc', fieldValue: { type: 'SourceLocation' } },
      { name: 'node', fieldValue: { unionElements: allNodeTypesAsFields } },
    ],
  };

  messages['SourceLocation'] = {
    name: 'SourceLocation',
    fields: [
      { name: 'source', fieldValue: { type: 'string' } },
      // SourceLocation will be generated by the logic.
      { name: 'start', fieldValue: { type: 'Position' } },
      { name: 'end', fieldValue: { type: 'Position' } },
    ],
  };

  messages['Position'] = {
    name: 'Position',
    fields: [
      { name: 'line', fieldValue: { type: 'int32' } },
      { name: 'end', fieldValue: { type: 'int32' } },
    ],
  };
}

export function writeMessagesToDir(messages: Record<string, ESTreeNode>, outputDir: string) {
  addHandWrittenMessages(messages);
  fs.writeFileSync(
    path.join(outputDir, 'estree.proto'),
    addPrefix(translateToProtoFormat(messages)),
  );
  /**
   * Translate the messages to a protobuf file format.
   */
  function translateToProtoFormat(messages: Record<string, ESTreeNode>): string {
    const lines: string[] = [];
    for (const message of Object.values(messages)) {
      let index = 1;
      lines.push(`message ${message.name} {`);
      for (const field of message.fields) {
        if ('elementValue' in field.fieldValue) {
          lines.push(
            `  repeated ${(field.fieldValue.elementValue as PrimitiveFieldValue).type} ${field.name} = ${index};`,
          );
        } else if ('unionElements' in field.fieldValue) {
          lines.push(`  oneof ${field.name} {`);
          for (const oneOfField of field.fieldValue.unionElements) {
            lines.push(
              `    ${(oneOfField.fieldValue as PrimitiveFieldValue).type} ${field.name}_${oneOfField.name} = ${index};`,
            );
            index++;
          }
          lines.push('  }');
          index--;
        } else {
          lines.push(`  ${field.fieldValue.type} ${field.name} = ${index};`);
        }
        index++;
      }
      lines.push('}');
    }
    return lines.join('\n');
  }

  function addPrefix(protoData: string) {
    return `syntax = "proto3";\n// Generated for @types/estree version: ${typesVersion}\n\n${protoData}`;
  }
}
