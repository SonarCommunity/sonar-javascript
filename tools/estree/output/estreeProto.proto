syntax = "proto3";
// Generated for @types/estree version: 1.0.5
option java_package="org.sonar.plugins.javascript.bridge.protobuf";
option java_multiple_files = true;

enum NodeType {
ArrayExpression = 0;
ArrayPattern = 1;
ArrowFunctionExpression = 2;
AssignmentExpression = 3;
AssignmentOperator = 4;
AssignmentPattern = 5;
AssignmentProperty = 6;
AwaitExpression = 7;
BaseNodeWithoutComments = 8;
BigIntLiteral = 9;
BinaryExpression = 10;
BinaryOperator = 11;
BlockStatement = 12;
BreakStatement = 13;
CallExpression = 14;
CatchClause = 15;
ChainElement = 16;
ChainExpression = 17;
ClassBody = 18;
ClassDeclaration = 19;
ClassExpression = 20;
ConditionalExpression = 21;
ContinueStatement = 22;
DebuggerStatement = 23;
Declaration = 24;
Directive = 25;
DoWhileStatement = 26;
EmptyStatement = 27;
ExportAllDeclaration = 28;
ExportDefaultDeclaration = 29;
ExportNamedDeclaration = 30;
ExportSpecifier = 31;
Expression = 32;
ExpressionStatement = 33;
ForInStatement = 34;
ForOfStatement = 35;
ForStatement = 36;
FunctionDeclaration = 37;
FunctionExpression = 38;
Identifier = 39;
IfStatement = 40;
ImportDeclaration = 41;
ImportDefaultSpecifier = 42;
ImportExpression = 43;
ImportNamespaceSpecifier = 44;
ImportSpecifier = 45;
LabeledStatement = 46;
Literal = 47;
LogicalExpression = 48;
LogicalOperator = 49;
MaybeNamedClassDeclaration = 50;
MaybeNamedFunctionDeclaration = 51;
MemberExpression = 52;
MetaProperty = 53;
MethodDefinition = 54;
ModuleDeclaration = 55;
NewExpression = 56;
ObjectExpression = 57;
ObjectPattern = 58;
Pattern = 59;
Position = 60;
PrivateIdentifier = 61;
Program = 62;
Property = 63;
PropertyDefinition = 64;
RegExpLiteral = 65;
RestElement = 66;
ReturnStatement = 67;
SequenceExpression = 68;
SimpleCallExpression = 69;
SimpleLiteral = 70;
SourceLocation = 71;
SpreadElement = 72;
Statement = 73;
StaticBlock = 74;
Super = 75;
SwitchCase = 76;
SwitchStatement = 77;
TaggedTemplateExpression = 78;
TemplateElement = 79;
TemplateLiteral = 80;
ThisExpression = 81;
ThrowStatement = 82;
TryStatement = 83;
UnaryExpression = 84;
UnaryOperator = 85;
UpdateExpression = 86;
UpdateOperator = 87;
VariableDeclaration = 88;
VariableDeclarator = 89;
WhileStatement = 90;
WithStatement = 91;
YieldExpression = 92
}

message RegExpLiteral {
  string pattern = 1;
  string flags = 2;
  string raw = 3;
}
message TemplateElement {
  bool tail = 1;
  string cooked = 2;
  string raw = 3;
}
message Program {
  string sourceType = 1;
  repeated BaseNodeWithoutComments body = 2;
}
message ModuleDeclaration {
  oneof moduleDeclaration {
    ImportDeclaration moduleDeclaration_importDeclaration = 1;
    ExportNamedDeclaration moduleDeclaration_exportNamedDeclaration = 2;
    ExportDefaultDeclaration moduleDeclaration_exportDefaultDeclaration = 3;
    ExportAllDeclaration moduleDeclaration_exportAllDeclaration = 4;
  }
}
message ExportAllDeclaration {
  Identifier exported = 1;
  Literal source = 2;
}
message Literal {
  oneof literal {
    SimpleLiteral literal_simpleLiteral = 1;
    RegExpLiteral literal_regExpLiteral = 2;
    BigIntLiteral literal_bigIntLiteral = 3;
  }
}
message BigIntLiteral {
  int32 value = 1;
  string bigint = 2;
  string raw = 3;
}
message SimpleLiteral {
  oneof value {
    string value_string = 1;
    bool value_boolean = 2;
    int32 value_number = 3;
  }
  string raw = 4;
}
message Identifier {
  string name = 1;
}
message ExportDefaultDeclaration {
  oneof declaration {
    MaybeNamedFunctionDeclaration declaration_maybeNamedFunctionDeclaration = 1;
    MaybeNamedClassDeclaration declaration_maybeNamedClassDeclaration = 2;
    Expression declaration_expression = 3;
  }
}
message Expression {
  oneof expression {
    ArrayExpression expression_arrayExpression = 1;
    ArrowFunctionExpression expression_arrowFunctionExpression = 2;
    AssignmentExpression expression_assignmentExpression = 3;
    AwaitExpression expression_awaitExpression = 4;
    BinaryExpression expression_binaryExpression = 5;
    CallExpression expression_callExpression = 6;
    ChainExpression expression_chainExpression = 7;
    ClassExpression expression_classExpression = 8;
    ConditionalExpression expression_conditionalExpression = 9;
    FunctionExpression expression_functionExpression = 10;
    Identifier expression_identifier = 11;
    ImportExpression expression_importExpression = 12;
    Literal expression_literal = 13;
    LogicalExpression expression_logicalExpression = 14;
    MemberExpression expression_memberExpression = 15;
    MetaProperty expression_metaProperty = 16;
    NewExpression expression_newExpression = 17;
    ObjectExpression expression_objectExpression = 18;
    SequenceExpression expression_sequenceExpression = 19;
    TaggedTemplateExpression expression_taggedTemplateExpression = 20;
    TemplateLiteral expression_templateLiteral = 21;
    ThisExpression expression_thisExpression = 22;
    UnaryExpression expression_unaryExpression = 23;
    UpdateExpression expression_updateExpression = 24;
    YieldExpression expression_yieldExpression = 25;
  }
}
message YieldExpression {
  Expression argument = 1;
  bool delegate = 2;
}
message UpdateExpression {
  UpdateOperator operator = 1;
  Expression argument = 2;
  bool prefix = 3;
}
message UpdateOperator {
  string updateOperator = 1;
}
message UnaryExpression {
  UnaryOperator operator = 1;
  bool prefix = 2;
  Expression argument = 3;
}
message UnaryOperator {
  string unaryOperator = 1;
}
message ThisExpression {
}
message TemplateLiteral {
  repeated TemplateElement quasis = 1;
  repeated Expression expressions = 2;
}
message TaggedTemplateExpression {
  Expression tag = 1;
  TemplateLiteral quasi = 2;
}
message SequenceExpression {
  repeated Expression expressions = 1;
}
message ObjectExpression {
  repeated BaseNodeWithoutComments properties = 1;
}
message SpreadElement {
  Expression argument = 1;
}
message Property {
  oneof key {
    Expression key_expression = 1;
    PrivateIdentifier key_privateIdentifier = 2;
  }
  oneof value {
    Expression value_expression = 3;
    Pattern value_pattern = 4;
  }
  string kind = 5;
  bool method = 6;
  bool shorthand = 7;
  bool computed = 8;
}
message Pattern {
  oneof pattern {
    Identifier pattern_identifier = 1;
    ObjectPattern pattern_objectPattern = 2;
    ArrayPattern pattern_arrayPattern = 3;
    RestElement pattern_restElement = 4;
    AssignmentPattern pattern_assignmentPattern = 5;
    MemberExpression pattern_memberExpression = 6;
  }
}
message AssignmentPattern {
  Pattern left = 1;
  Expression right = 2;
}
message RestElement {
  Pattern argument = 1;
}
message ArrayPattern {
  repeated Pattern elements = 1;
}
message ObjectPattern {
  repeated BaseNodeWithoutComments properties = 1;
}
message AssignmentProperty {
  Pattern value = 1;
  string kind = 2;
  bool method = 3;
  oneof key {
    Expression key_expression = 4;
    PrivateIdentifier key_privateIdentifier = 5;
  }
  bool shorthand = 6;
  bool computed = 7;
}
message PrivateIdentifier {
  string name = 1;
}
message NewExpression {
  oneof callee {
    Expression callee_expression = 1;
    Super callee_super = 2;
  }
  repeated BaseNodeWithoutComments arguments = 3;
}
message Super {
}
message MetaProperty {
  Identifier meta = 1;
  Identifier property = 2;
}
message MemberExpression {
  oneof object {
    Expression object_expression = 1;
    Super object_super = 2;
  }
  oneof property {
    Expression property_expression = 3;
    PrivateIdentifier property_privateIdentifier = 4;
  }
  bool computed = 5;
  bool optional = 6;
}
message LogicalExpression {
  LogicalOperator operator = 1;
  Expression left = 2;
  Expression right = 3;
}
message LogicalOperator {
  string logicalOperator = 1;
}
message ImportExpression {
  Expression source = 1;
}
message FunctionExpression {
  Identifier id = 1;
  BlockStatement body = 2;
  repeated Pattern params = 3;
  bool generator = 4;
  bool async = 5;
}
message BlockStatement {
  repeated Statement body = 1;
}
message ConditionalExpression {
  Expression test = 1;
  Expression alternate = 2;
  Expression consequent = 3;
}
message ClassExpression {
  Identifier id = 1;
  Expression superClass = 2;
  ClassBody body = 3;
}
message ClassBody {
  repeated BaseNodeWithoutComments body = 1;
}
message StaticBlock {
}
message PropertyDefinition {
  oneof key {
    Expression key_expression = 1;
    PrivateIdentifier key_privateIdentifier = 2;
  }
  Expression value = 3;
  bool computed = 4;
  bool static = 5;
}
message MethodDefinition {
  oneof key {
    Expression key_expression = 1;
    PrivateIdentifier key_privateIdentifier = 2;
  }
  FunctionExpression value = 3;
  string kind = 4;
  bool computed = 5;
  bool static = 6;
}
message ChainExpression {
  ChainElement expression = 1;
}
message ChainElement {
  oneof chainElement {
    SimpleCallExpression chainElement_simpleCallExpression = 1;
    MemberExpression chainElement_memberExpression = 2;
  }
}
message SimpleCallExpression {
  bool optional = 1;
  oneof callee {
    Expression callee_expression = 2;
    Super callee_super = 3;
  }
  repeated BaseNodeWithoutComments arguments = 4;
}
message CallExpression {
  oneof callExpression {
    SimpleCallExpression callExpression_simpleCallExpression = 1;
    NewExpression callExpression_newExpression = 2;
  }
}
message BinaryExpression {
  BinaryOperator operator = 1;
  Expression left = 2;
  Expression right = 3;
}
message BinaryOperator {
  string binaryOperator = 1;
}
message AwaitExpression {
  Expression argument = 1;
}
message AssignmentExpression {
  AssignmentOperator operator = 1;
  oneof left {
    Pattern left_pattern = 2;
    MemberExpression left_memberExpression = 3;
  }
  Expression right = 4;
}
message AssignmentOperator {
  string assignmentOperator = 1;
}
message ArrowFunctionExpression {
  bool expression = 1;
  oneof body {
    BlockStatement body_blockStatement = 2;
    Expression body_expression = 3;
  }
  repeated Pattern params = 4;
  bool generator = 5;
  bool async = 6;
}
message ArrayExpression {
  repeated BaseNodeWithoutComments elements = 1;
}
message MaybeNamedClassDeclaration {
  Identifier id = 1;
  Expression superClass = 2;
  ClassBody body = 3;
}
message MaybeNamedFunctionDeclaration {
  Identifier id = 1;
  BlockStatement body = 2;
  repeated Pattern params = 3;
  bool generator = 4;
  bool async = 5;
}
message ExportNamedDeclaration {
  Declaration declaration = 1;
  repeated ExportSpecifier specifiers = 2;
  Literal source = 3;
}
message ExportSpecifier {
  Identifier exported = 1;
  Identifier local = 2;
}
message Declaration {
  oneof declaration {
    FunctionDeclaration declaration_functionDeclaration = 1;
    VariableDeclaration declaration_variableDeclaration = 2;
    ClassDeclaration declaration_classDeclaration = 3;
  }
}
message ClassDeclaration {
  Identifier id = 1;
  Expression superClass = 2;
  ClassBody body = 3;
}
message VariableDeclaration {
  repeated VariableDeclarator declarations = 1;
  string kind = 2;
}
message VariableDeclarator {
  Pattern id = 1;
  Expression init = 2;
}
message FunctionDeclaration {
  Identifier id = 1;
  BlockStatement body = 2;
  repeated Pattern params = 3;
  bool generator = 4;
  bool async = 5;
}
message ImportDeclaration {
  repeated BaseNodeWithoutComments specifiers = 1;
  Literal source = 2;
}
message ImportNamespaceSpecifier {
  Identifier local = 1;
}
message ImportDefaultSpecifier {
  Identifier local = 1;
}
message ImportSpecifier {
  Identifier imported = 1;
  Identifier local = 2;
}
message Statement {
  oneof statement {
    ExpressionStatement statement_expressionStatement = 1;
    BlockStatement statement_blockStatement = 2;
    StaticBlock statement_staticBlock = 3;
    EmptyStatement statement_emptyStatement = 4;
    DebuggerStatement statement_debuggerStatement = 5;
    WithStatement statement_withStatement = 6;
    ReturnStatement statement_returnStatement = 7;
    LabeledStatement statement_labeledStatement = 8;
    BreakStatement statement_breakStatement = 9;
    ContinueStatement statement_continueStatement = 10;
    IfStatement statement_ifStatement = 11;
    SwitchStatement statement_switchStatement = 12;
    ThrowStatement statement_throwStatement = 13;
    TryStatement statement_tryStatement = 14;
    WhileStatement statement_whileStatement = 15;
    DoWhileStatement statement_doWhileStatement = 16;
    ForStatement statement_forStatement = 17;
    ForInStatement statement_forInStatement = 18;
    ForOfStatement statement_forOfStatement = 19;
    Declaration statement_declaration = 20;
  }
}
message ForOfStatement {
  bool await = 1;
  oneof left {
    VariableDeclaration left_variableDeclaration = 2;
    Pattern left_pattern = 3;
  }
  Expression right = 4;
  Statement body = 5;
}
message ForInStatement {
  oneof left {
    VariableDeclaration left_variableDeclaration = 1;
    Pattern left_pattern = 2;
  }
  Expression right = 3;
  Statement body = 4;
}
message ForStatement {
  oneof init {
    VariableDeclaration init_variableDeclaration = 1;
    Expression init_expression = 2;
  }
  Expression test = 3;
  Expression update = 4;
  Statement body = 5;
}
message DoWhileStatement {
  Statement body = 1;
  Expression test = 2;
}
message WhileStatement {
  Expression test = 1;
  Statement body = 2;
}
message TryStatement {
  BlockStatement block = 1;
  CatchClause handler = 2;
  BlockStatement finalizer = 3;
}
message CatchClause {
  Pattern param = 1;
  BlockStatement body = 2;
}
message ThrowStatement {
  Expression argument = 1;
}
message SwitchStatement {
  Expression discriminant = 1;
  repeated SwitchCase cases = 2;
}
message SwitchCase {
  Expression test = 1;
  repeated Statement consequent = 2;
}
message IfStatement {
  Expression test = 1;
  Statement consequent = 2;
  Statement alternate = 3;
}
message ContinueStatement {
  Identifier label = 1;
}
message BreakStatement {
  Identifier label = 1;
}
message LabeledStatement {
  Identifier label = 1;
  Statement body = 2;
}
message ReturnStatement {
  Expression argument = 1;
}
message WithStatement {
  Expression object = 1;
  Statement body = 2;
}
message DebuggerStatement {
}
message EmptyStatement {
}
message ExpressionStatement {
  Expression expression = 1;
}
message Directive {
  Literal expression = 1;
  string directive = 2;
}
message BaseNodeWithoutComments {
  string type = 1;
  SourceLocation loc = 2;
  oneof node {
    RegExpLiteral node_regExpLiteral = 3;
    TemplateElement node_templateElement = 4;
    Program node_program = 5;
    ModuleDeclaration node_moduleDeclaration = 6;
    ExportAllDeclaration node_exportAllDeclaration = 7;
    Literal node_literal = 8;
    BigIntLiteral node_bigIntLiteral = 9;
    SimpleLiteral node_simpleLiteral = 10;
    Identifier node_identifier = 11;
    ExportDefaultDeclaration node_exportDefaultDeclaration = 12;
    Expression node_expression = 13;
    YieldExpression node_yieldExpression = 14;
    UpdateExpression node_updateExpression = 15;
    UpdateOperator node_updateOperator = 16;
    UnaryExpression node_unaryExpression = 17;
    UnaryOperator node_unaryOperator = 18;
    ThisExpression node_thisExpression = 19;
    TemplateLiteral node_templateLiteral = 20;
    TaggedTemplateExpression node_taggedTemplateExpression = 21;
    SequenceExpression node_sequenceExpression = 22;
    ObjectExpression node_objectExpression = 23;
    SpreadElement node_spreadElement = 24;
    Property node_property = 25;
    Pattern node_pattern = 26;
    AssignmentPattern node_assignmentPattern = 27;
    RestElement node_restElement = 28;
    ArrayPattern node_arrayPattern = 29;
    ObjectPattern node_objectPattern = 30;
    AssignmentProperty node_assignmentProperty = 31;
    PrivateIdentifier node_privateIdentifier = 32;
    NewExpression node_newExpression = 33;
    Super node_super = 34;
    MetaProperty node_metaProperty = 35;
    MemberExpression node_memberExpression = 36;
    LogicalExpression node_logicalExpression = 37;
    LogicalOperator node_logicalOperator = 38;
    ImportExpression node_importExpression = 39;
    FunctionExpression node_functionExpression = 40;
    BlockStatement node_blockStatement = 41;
    ConditionalExpression node_conditionalExpression = 42;
    ClassExpression node_classExpression = 43;
    ClassBody node_classBody = 44;
    StaticBlock node_staticBlock = 45;
    PropertyDefinition node_propertyDefinition = 46;
    MethodDefinition node_methodDefinition = 47;
    ChainExpression node_chainExpression = 48;
    ChainElement node_chainElement = 49;
    SimpleCallExpression node_simpleCallExpression = 50;
    CallExpression node_callExpression = 51;
    BinaryExpression node_binaryExpression = 52;
    BinaryOperator node_binaryOperator = 53;
    AwaitExpression node_awaitExpression = 54;
    AssignmentExpression node_assignmentExpression = 55;
    AssignmentOperator node_assignmentOperator = 56;
    ArrowFunctionExpression node_arrowFunctionExpression = 57;
    ArrayExpression node_arrayExpression = 58;
    MaybeNamedClassDeclaration node_maybeNamedClassDeclaration = 59;
    MaybeNamedFunctionDeclaration node_maybeNamedFunctionDeclaration = 60;
    ExportNamedDeclaration node_exportNamedDeclaration = 61;
    ExportSpecifier node_exportSpecifier = 62;
    Declaration node_declaration = 63;
    ClassDeclaration node_classDeclaration = 64;
    VariableDeclaration node_variableDeclaration = 65;
    VariableDeclarator node_variableDeclarator = 66;
    FunctionDeclaration node_functionDeclaration = 67;
    ImportDeclaration node_importDeclaration = 68;
    ImportNamespaceSpecifier node_importNamespaceSpecifier = 69;
    ImportDefaultSpecifier node_importDefaultSpecifier = 70;
    ImportSpecifier node_importSpecifier = 71;
    Statement node_statement = 72;
    ForOfStatement node_forOfStatement = 73;
    ForInStatement node_forInStatement = 74;
    ForStatement node_forStatement = 75;
    DoWhileStatement node_doWhileStatement = 76;
    WhileStatement node_whileStatement = 77;
    TryStatement node_tryStatement = 78;
    CatchClause node_catchClause = 79;
    ThrowStatement node_throwStatement = 80;
    SwitchStatement node_switchStatement = 81;
    SwitchCase node_switchCase = 82;
    IfStatement node_ifStatement = 83;
    ContinueStatement node_continueStatement = 84;
    BreakStatement node_breakStatement = 85;
    LabeledStatement node_labeledStatement = 86;
    ReturnStatement node_returnStatement = 87;
    WithStatement node_withStatement = 88;
    DebuggerStatement node_debuggerStatement = 89;
    EmptyStatement node_emptyStatement = 90;
    ExpressionStatement node_expressionStatement = 91;
    Directive node_directive = 92;
  }
}
message SourceLocation {
  string source = 1;
  Position start = 2;
  Position end = 3;
}
message Position {
  int32 line = 1;
  int32 end = 2;
}