syntax = "proto3";
// Generated for @types/estree version: 1.0.5

message Program {
  string sourceType = 1;
  repeated BaseNodeWithoutComments body = 2;
}
message ModuleDeclaration {
  oneof moduleDeclaration {
    ImportDeclaration moduleDeclaration_importDeclaration = 3;
    ExportNamedDeclaration moduleDeclaration_exportNamedDeclaration = 4;
    ExportDefaultDeclaration moduleDeclaration_exportDefaultDeclaration = 5;
    ExportAllDeclaration moduleDeclaration_exportAllDeclaration = 6;
  }
}
message ExportAllDeclaration {
  Identifier exported = 7;
  Literal source = 8;
}
message Literal {
  oneof literal {
    SimpleLiteral literal_simpleLiteral = 9;
    RegExpLiteral literal_regExpLiteral = 10;
    BigIntLiteral literal_bigIntLiteral = 11;
  }
}
message BigIntLiteral {
  int32 value = 12;
  string bigint = 13;
  string raw = 14;
}
message SimpleLiteral {
  oneof value {
    string value_string = 15;
    bool value_boolean = 16;
    int32 value_number = 17;
  }
  string raw = 18;
}
message Identifier {
  string name = 19;
}
message ExportDefaultDeclaration {
  oneof declaration {
    MaybeNamedFunctionDeclaration declaration_maybeNamedFunctionDeclaration = 20;
    MaybeNamedClassDeclaration declaration_maybeNamedClassDeclaration = 21;
    Expression declaration_expression = 22;
  }
}
message Expression {
  oneof expression {
    ArrayExpression expression_arrayExpression = 23;
    ArrowFunctionExpression expression_arrowFunctionExpression = 24;
    AssignmentExpression expression_assignmentExpression = 25;
    AwaitExpression expression_awaitExpression = 26;
    BinaryExpression expression_binaryExpression = 27;
    CallExpression expression_callExpression = 28;
    ChainExpression expression_chainExpression = 29;
    ClassExpression expression_classExpression = 30;
    ConditionalExpression expression_conditionalExpression = 31;
    FunctionExpression expression_functionExpression = 32;
    Identifier expression_identifier = 33;
    ImportExpression expression_importExpression = 34;
    Literal expression_literal = 35;
    LogicalExpression expression_logicalExpression = 36;
    MemberExpression expression_memberExpression = 37;
    MetaProperty expression_metaProperty = 38;
    NewExpression expression_newExpression = 39;
    ObjectExpression expression_objectExpression = 40;
    SequenceExpression expression_sequenceExpression = 41;
    TaggedTemplateExpression expression_taggedTemplateExpression = 42;
    TemplateLiteral expression_templateLiteral = 43;
    ThisExpression expression_thisExpression = 44;
    UnaryExpression expression_unaryExpression = 45;
    UpdateExpression expression_updateExpression = 46;
    YieldExpression expression_yieldExpression = 47;
  }
}
message YieldExpression {
  Expression argument = 48;
  bool delegate = 49;
}
message UpdateExpression {
  UpdateOperator operator = 50;
  Expression argument = 51;
  bool prefix = 52;
}
message UpdateOperator {
  string updateOperator = 53;
}
message UnaryExpression {
  UnaryOperator operator = 54;
  bool prefix = 55;
  Expression argument = 56;
}
message UnaryOperator {
  string unaryOperator = 57;
}
message ThisExpression {
}
message TemplateLiteral {
  repeated TemplateElement quasis = 58;
  repeated Expression expressions = 59;
}
message TaggedTemplateExpression {
  Expression tag = 60;
  TemplateLiteral quasi = 61;
}
message SequenceExpression {
  repeated Expression expressions = 62;
}
message ObjectExpression {
  repeated BaseNodeWithoutComments properties = 63;
}
message SpreadElement {
  Expression argument = 64;
}
message Property {
  oneof key {
    Expression key_expression = 65;
    PrivateIdentifier key_privateIdentifier = 66;
  }
  oneof value {
    Expression value_expression = 67;
    Pattern value_pattern = 68;
  }
  string kind = 69;
  bool method = 70;
  bool shorthand = 71;
  bool computed = 72;
}
message Pattern {
  oneof pattern {
    Identifier pattern_identifier = 73;
    ObjectPattern pattern_objectPattern = 74;
    ArrayPattern pattern_arrayPattern = 75;
    RestElement pattern_restElement = 76;
    AssignmentPattern pattern_assignmentPattern = 77;
    MemberExpression pattern_memberExpression = 78;
  }
}
message AssignmentPattern {
  Pattern left = 79;
  Expression right = 80;
}
message RestElement {
  Pattern argument = 81;
}
message ArrayPattern {
  repeated Pattern elements = 82;
}
message ObjectPattern {
  repeated BaseNodeWithoutComments properties = 83;
}
message AssignmentProperty {
  Pattern value = 84;
  string kind = 85;
  bool method = 86;
  oneof key {
    Expression key_expression = 87;
    PrivateIdentifier key_privateIdentifier = 88;
  }
  bool shorthand = 89;
  bool computed = 90;
}
message PrivateIdentifier {
  string name = 91;
}
message NewExpression {
  oneof callee {
    Expression callee_expression = 92;
    Super callee_super = 93;
  }
  repeated BaseNodeWithoutComments arguments = 94;
}
message Super {
}
message MetaProperty {
  Identifier meta = 95;
  Identifier property = 96;
}
message MemberExpression {
  oneof object {
    Expression object_expression = 97;
    Super object_super = 98;
  }
  oneof property {
    Expression property_expression = 99;
    PrivateIdentifier property_privateIdentifier = 100;
  }
  bool computed = 101;
  bool optional = 102;
}
message LogicalExpression {
  LogicalOperator operator = 103;
  Expression left = 104;
  Expression right = 105;
}
message LogicalOperator {
  string logicalOperator = 106;
}
message ImportExpression {
  Expression source = 107;
}
message FunctionExpression {
  Identifier id = 108;
  BlockStatement body = 109;
  repeated Pattern params = 110;
  bool generator = 111;
  bool async = 112;
}
message BlockStatement {
  repeated Statement body = 113;
}
message ConditionalExpression {
  Expression test = 114;
  Expression alternate = 115;
  Expression consequent = 116;
}
message ClassExpression {
  Identifier id = 117;
  Expression superClass = 118;
  ClassBody body = 119;
}
message ClassBody {
  repeated BaseNodeWithoutComments body = 120;
}
message StaticBlock {
}
message PropertyDefinition {
  oneof key {
    Expression key_expression = 121;
    PrivateIdentifier key_privateIdentifier = 122;
  }
  Expression value = 123;
  bool computed = 124;
  bool static = 125;
}
message MethodDefinition {
  oneof key {
    Expression key_expression = 126;
    PrivateIdentifier key_privateIdentifier = 127;
  }
  FunctionExpression value = 128;
  string kind = 129;
  bool computed = 130;
  bool static = 131;
}
message ChainExpression {
  ChainElement expression = 132;
}
message ChainElement {
  oneof chainElement {
    SimpleCallExpression chainElement_simpleCallExpression = 133;
    MemberExpression chainElement_memberExpression = 134;
  }
}
message SimpleCallExpression {
  bool optional = 135;
  oneof callee {
    Expression callee_expression = 136;
    Super callee_super = 137;
  }
  repeated BaseNodeWithoutComments arguments = 138;
}
message CallExpression {
  oneof callExpression {
    SimpleCallExpression callExpression_simpleCallExpression = 139;
    NewExpression callExpression_newExpression = 140;
  }
}
message BinaryExpression {
  BinaryOperator operator = 141;
  Expression left = 142;
  Expression right = 143;
}
message BinaryOperator {
  string binaryOperator = 144;
}
message AwaitExpression {
  Expression argument = 145;
}
message AssignmentExpression {
  AssignmentOperator operator = 146;
  oneof left {
    Pattern left_pattern = 147;
    MemberExpression left_memberExpression = 148;
  }
  Expression right = 149;
}
message AssignmentOperator {
  string assignmentOperator = 150;
}
message ArrowFunctionExpression {
  bool expression = 151;
  oneof body {
    BlockStatement body_blockStatement = 152;
    Expression body_expression = 153;
  }
  repeated Pattern params = 154;
  bool generator = 155;
  bool async = 156;
}
message ArrayExpression {
  repeated BaseNodeWithoutComments elements = 157;
}
message MaybeNamedClassDeclaration {
  Identifier id = 158;
  Expression superClass = 159;
  ClassBody body = 160;
}
message MaybeNamedFunctionDeclaration {
  Identifier id = 161;
  BlockStatement body = 162;
  repeated Pattern params = 163;
  bool generator = 164;
  bool async = 165;
}
message ExportNamedDeclaration {
  Declaration declaration = 166;
  repeated ExportSpecifier specifiers = 167;
  Literal source = 168;
}
message ExportSpecifier {
  Identifier exported = 169;
  Identifier local = 170;
}
message Declaration {
  oneof declaration {
    FunctionDeclaration declaration_functionDeclaration = 171;
    VariableDeclaration declaration_variableDeclaration = 172;
    ClassDeclaration declaration_classDeclaration = 173;
  }
}
message ClassDeclaration {
  Identifier id = 174;
  Expression superClass = 175;
  ClassBody body = 176;
}
message VariableDeclaration {
  repeated VariableDeclarator declarations = 177;
  string kind = 178;
}
message VariableDeclarator {
  Pattern id = 179;
  Expression init = 180;
}
message FunctionDeclaration {
  Identifier id = 181;
  BlockStatement body = 182;
  repeated Pattern params = 183;
  bool generator = 184;
  bool async = 185;
}
message ImportDeclaration {
  repeated BaseNodeWithoutComments specifiers = 186;
  Literal source = 187;
}
message ImportNamespaceSpecifier {
  Identifier local = 188;
}
message ImportDefaultSpecifier {
  Identifier local = 189;
}
message ImportSpecifier {
  Identifier imported = 190;
  Identifier local = 191;
}
message Statement {
  oneof statement {
    ExpressionStatement statement_expressionStatement = 192;
    BlockStatement statement_blockStatement = 193;
    StaticBlock statement_staticBlock = 194;
    EmptyStatement statement_emptyStatement = 195;
    DebuggerStatement statement_debuggerStatement = 196;
    WithStatement statement_withStatement = 197;
    ReturnStatement statement_returnStatement = 198;
    LabeledStatement statement_labeledStatement = 199;
    BreakStatement statement_breakStatement = 200;
    ContinueStatement statement_continueStatement = 201;
    IfStatement statement_ifStatement = 202;
    SwitchStatement statement_switchStatement = 203;
    ThrowStatement statement_throwStatement = 204;
    TryStatement statement_tryStatement = 205;
    WhileStatement statement_whileStatement = 206;
    DoWhileStatement statement_doWhileStatement = 207;
    ForStatement statement_forStatement = 208;
    ForInStatement statement_forInStatement = 209;
    ForOfStatement statement_forOfStatement = 210;
    Declaration statement_declaration = 211;
  }
}
message ForOfStatement {
  bool await = 212;
  oneof left {
    VariableDeclaration left_variableDeclaration = 213;
    Pattern left_pattern = 214;
  }
  Expression right = 215;
  Statement body = 216;
}
message ForInStatement {
  oneof left {
    VariableDeclaration left_variableDeclaration = 217;
    Pattern left_pattern = 218;
  }
  Expression right = 219;
  Statement body = 220;
}
message ForStatement {
  oneof init {
    VariableDeclaration init_variableDeclaration = 221;
    Expression init_expression = 222;
  }
  Expression test = 223;
  Expression update = 224;
  Statement body = 225;
}
message DoWhileStatement {
  Statement body = 226;
  Expression test = 227;
}
message WhileStatement {
  Expression test = 228;
  Statement body = 229;
}
message TryStatement {
  BlockStatement block = 230;
  CatchClause handler = 231;
  BlockStatement finalizer = 232;
}
message CatchClause {
  Pattern param = 233;
  BlockStatement body = 234;
}
message ThrowStatement {
  Expression argument = 235;
}
message SwitchStatement {
  Expression discriminant = 236;
  repeated SwitchCase cases = 237;
}
message SwitchCase {
  Expression test = 238;
  repeated Statement consequent = 239;
}
message IfStatement {
  Expression test = 240;
  Statement consequent = 241;
  Statement alternate = 242;
}
message ContinueStatement {
  Identifier label = 243;
}
message BreakStatement {
  Identifier label = 244;
}
message LabeledStatement {
  Identifier label = 245;
  Statement body = 246;
}
message ReturnStatement {
  Expression argument = 247;
}
message WithStatement {
  Expression object = 248;
  Statement body = 249;
}
message DebuggerStatement {
}
message EmptyStatement {
}
message ExpressionStatement {
  Expression expression = 250;
}
message Directive {
  Literal expression = 251;
  string directive = 252;
}
message RegExpLiteral {
  string pattern = 253;
  string flags = 254;
  string raw = 255;
}
message TemplateElement {
  bool tail = 256;
  string cooked = 257;
  string raw = 258;
}
message BaseNodeWithoutComments {
  string type = 259;
  SourceLocation loc = 260;
  oneof node {
    Program node_program = 261;
    ModuleDeclaration node_moduleDeclaration = 262;
    ExportAllDeclaration node_exportAllDeclaration = 263;
    Literal node_literal = 264;
    BigIntLiteral node_bigIntLiteral = 265;
    SimpleLiteral node_simpleLiteral = 266;
    Identifier node_identifier = 267;
    ExportDefaultDeclaration node_exportDefaultDeclaration = 268;
    Expression node_expression = 269;
    YieldExpression node_yieldExpression = 270;
    UpdateExpression node_updateExpression = 271;
    UpdateOperator node_updateOperator = 272;
    UnaryExpression node_unaryExpression = 273;
    UnaryOperator node_unaryOperator = 274;
    ThisExpression node_thisExpression = 275;
    TemplateLiteral node_templateLiteral = 276;
    TaggedTemplateExpression node_taggedTemplateExpression = 277;
    SequenceExpression node_sequenceExpression = 278;
    ObjectExpression node_objectExpression = 279;
    SpreadElement node_spreadElement = 280;
    Property node_property = 281;
    Pattern node_pattern = 282;
    AssignmentPattern node_assignmentPattern = 283;
    RestElement node_restElement = 284;
    ArrayPattern node_arrayPattern = 285;
    ObjectPattern node_objectPattern = 286;
    AssignmentProperty node_assignmentProperty = 287;
    PrivateIdentifier node_privateIdentifier = 288;
    NewExpression node_newExpression = 289;
    Super node_super = 290;
    MetaProperty node_metaProperty = 291;
    MemberExpression node_memberExpression = 292;
    LogicalExpression node_logicalExpression = 293;
    LogicalOperator node_logicalOperator = 294;
    ImportExpression node_importExpression = 295;
    FunctionExpression node_functionExpression = 296;
    BlockStatement node_blockStatement = 297;
    ConditionalExpression node_conditionalExpression = 298;
    ClassExpression node_classExpression = 299;
    ClassBody node_classBody = 300;
    StaticBlock node_staticBlock = 301;
    PropertyDefinition node_propertyDefinition = 302;
    MethodDefinition node_methodDefinition = 303;
    ChainExpression node_chainExpression = 304;
    ChainElement node_chainElement = 305;
    SimpleCallExpression node_simpleCallExpression = 306;
    CallExpression node_callExpression = 307;
    BinaryExpression node_binaryExpression = 308;
    BinaryOperator node_binaryOperator = 309;
    AwaitExpression node_awaitExpression = 310;
    AssignmentExpression node_assignmentExpression = 311;
    AssignmentOperator node_assignmentOperator = 312;
    ArrowFunctionExpression node_arrowFunctionExpression = 313;
    ArrayExpression node_arrayExpression = 314;
    MaybeNamedClassDeclaration node_maybeNamedClassDeclaration = 315;
    MaybeNamedFunctionDeclaration node_maybeNamedFunctionDeclaration = 316;
    ExportNamedDeclaration node_exportNamedDeclaration = 317;
    ExportSpecifier node_exportSpecifier = 318;
    Declaration node_declaration = 319;
    ClassDeclaration node_classDeclaration = 320;
    VariableDeclaration node_variableDeclaration = 321;
    VariableDeclarator node_variableDeclarator = 322;
    FunctionDeclaration node_functionDeclaration = 323;
    ImportDeclaration node_importDeclaration = 324;
    ImportNamespaceSpecifier node_importNamespaceSpecifier = 325;
    ImportDefaultSpecifier node_importDefaultSpecifier = 326;
    ImportSpecifier node_importSpecifier = 327;
    Statement node_statement = 328;
    ForOfStatement node_forOfStatement = 329;
    ForInStatement node_forInStatement = 330;
    ForStatement node_forStatement = 331;
    DoWhileStatement node_doWhileStatement = 332;
    WhileStatement node_whileStatement = 333;
    TryStatement node_tryStatement = 334;
    CatchClause node_catchClause = 335;
    ThrowStatement node_throwStatement = 336;
    SwitchStatement node_switchStatement = 337;
    SwitchCase node_switchCase = 338;
    IfStatement node_ifStatement = 339;
    ContinueStatement node_continueStatement = 340;
    BreakStatement node_breakStatement = 341;
    LabeledStatement node_labeledStatement = 342;
    ReturnStatement node_returnStatement = 343;
    WithStatement node_withStatement = 344;
    DebuggerStatement node_debuggerStatement = 345;
    EmptyStatement node_emptyStatement = 346;
    ExpressionStatement node_expressionStatement = 347;
    Directive node_directive = 348;
    RegExpLiteral node_regExpLiteral = 349;
    TemplateElement node_templateElement = 350;
  }
}
message SourceLocation {
  string source = 351;
  Position start = 352;
  Position end = 353;
}
message Position {
  int32 line = 354;
  int32 end = 355;
}