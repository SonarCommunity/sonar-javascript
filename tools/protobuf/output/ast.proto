syntax = "proto3";

message Program {
  string sourceType = 1;
  repeated BaseNodeWithoutComments body = 2;
  SourceLocation loc = 3;
}
message SourceLocation {
  string source = 4;
  Position start = 5;
  Position end = 6;
}
message Position {
  int32 line = 7;
  int32 end = 8;
}
message ModuleDeclaration {
  oneof moduleDeclaration {
    ImportDeclaration moduleDeclaration_importDeclaration = 9;
    ExportNamedDeclaration moduleDeclaration_exportNamedDeclaration = 10;
    ExportDefaultDeclaration moduleDeclaration_exportDefaultDeclaration = 11;
    ExportAllDeclaration moduleDeclaration_exportAllDeclaration = 12;
  }
}
message ExportAllDeclaration {
  Identifier exported = 13;
  Literal source = 14;
  SourceLocation loc = 15;
}
message Literal {
  oneof literal {
    SimpleLiteral literal_simpleLiteral = 16;
    BigIntLiteral literal_bigIntLiteral = 17;
  }
}
message BigIntLiteral {
  int32 value = 18;
  string bigint = 19;
  string raw = 20;
  SourceLocation loc = 21;
}
message SimpleLiteral {
  oneof value {
    string value_string = 22;
    bool value_boolean = 23;
    int32 value_number = 24;
  }
  string raw = 25;
  SourceLocation loc = 26;
}
message Identifier {
  string name = 27;
  SourceLocation loc = 28;
}
message ExportDefaultDeclaration {
  oneof declaration {
    MaybeNamedFunctionDeclaration declaration_maybeNamedFunctionDeclaration = 29;
    MaybeNamedClassDeclaration declaration_maybeNamedClassDeclaration = 30;
    Expression declaration_expression = 31;
  }
  SourceLocation loc = 32;
}
message Expression {
  oneof expression {
    ArrayExpression expression_arrayExpression = 33;
    ArrowFunctionExpression expression_arrowFunctionExpression = 34;
    AssignmentExpression expression_assignmentExpression = 35;
    AwaitExpression expression_awaitExpression = 36;
    BinaryExpression expression_binaryExpression = 37;
    CallExpression expression_callExpression = 38;
    ChainExpression expression_chainExpression = 39;
    ClassExpression expression_classExpression = 40;
    ConditionalExpression expression_conditionalExpression = 41;
    FunctionExpression expression_functionExpression = 42;
    Identifier expression_identifier = 43;
    ImportExpression expression_importExpression = 44;
    Literal expression_literal = 45;
    LogicalExpression expression_logicalExpression = 46;
    MemberExpression expression_memberExpression = 47;
    MetaProperty expression_metaProperty = 48;
    NewExpression expression_newExpression = 49;
    ObjectExpression expression_objectExpression = 50;
    SequenceExpression expression_sequenceExpression = 51;
    TaggedTemplateExpression expression_taggedTemplateExpression = 52;
    TemplateLiteral expression_templateLiteral = 53;
    ThisExpression expression_thisExpression = 54;
    UnaryExpression expression_unaryExpression = 55;
    UpdateExpression expression_updateExpression = 56;
    YieldExpression expression_yieldExpression = 57;
  }
}
message YieldExpression {
  Expression argument = 58;
  bool delegate = 59;
  SourceLocation loc = 60;
}
message UpdateExpression {
  UpdateOperator operator = 61;
  Expression argument = 62;
  bool prefix = 63;
  SourceLocation loc = 64;
}
message UpdateOperator {
  string updateOperator = 65;
}
message UnaryExpression {
  UnaryOperator operator = 66;
  bool prefix = 67;
  Expression argument = 68;
  SourceLocation loc = 69;
}
message UnaryOperator {
  string unaryOperator = 70;
}
message ThisExpression {
  SourceLocation loc = 71;
}
message TemplateLiteral {
  repeated TemplateElement quasis = 72;
  repeated Expression expressions = 73;
  SourceLocation loc = 74;
}
message TemplateElement {
  bool tail = 75;
  ERROR_UNEXPECTED value = 76;
  SourceLocation loc = 77;
}
message TaggedTemplateExpression {
  Expression tag = 78;
  TemplateLiteral quasi = 79;
  SourceLocation loc = 80;
}
message SequenceExpression {
  repeated Expression expressions = 81;
  SourceLocation loc = 82;
}
message ObjectExpression {
  repeated BaseNodeWithoutComments properties = 83;
  SourceLocation loc = 84;
}
message SpreadElement {
  Expression argument = 85;
  SourceLocation loc = 86;
}
message Property {
  oneof key {
    Expression key_expression = 87;
    PrivateIdentifier key_privateIdentifier = 88;
  }
  oneof value {
    Expression value_expression = 89;
    Pattern value_pattern = 90;
  }
  string kind = 91;
  bool method = 92;
  bool shorthand = 93;
  bool computed = 94;
  SourceLocation loc = 95;
}
message Pattern {
  oneof pattern {
    Identifier pattern_identifier = 96;
    ObjectPattern pattern_objectPattern = 97;
    ArrayPattern pattern_arrayPattern = 98;
    RestElement pattern_restElement = 99;
    AssignmentPattern pattern_assignmentPattern = 100;
    MemberExpression pattern_memberExpression = 101;
  }
}
message AssignmentPattern {
  Pattern left = 102;
  Expression right = 103;
  SourceLocation loc = 104;
}
message RestElement {
  Pattern argument = 105;
  SourceLocation loc = 106;
}
message ArrayPattern {
  repeated Pattern elements = 107;
  SourceLocation loc = 108;
}
message ObjectPattern {
  repeated BaseNodeWithoutComments properties = 109;
  SourceLocation loc = 110;
}
message AssignmentProperty {
  Pattern value = 111;
  string kind = 112;
  bool method = 113;
  SourceLocation loc = 114;
}
message PrivateIdentifier {
  string name = 115;
  SourceLocation loc = 116;
}
message NewExpression {
  SourceLocation loc = 117;
}
message MetaProperty {
  Identifier meta = 118;
  Identifier property = 119;
  SourceLocation loc = 120;
}
message MemberExpression {
  oneof object {
    Expression object_expression = 121;
    Super object_super = 122;
  }
  oneof property {
    Expression property_expression = 123;
    PrivateIdentifier property_privateIdentifier = 124;
  }
  bool computed = 125;
  bool optional = 126;
  SourceLocation loc = 127;
}
message Super {
  SourceLocation loc = 128;
}
message LogicalExpression {
  LogicalOperator operator = 129;
  Expression left = 130;
  Expression right = 131;
  SourceLocation loc = 132;
}
message LogicalOperator {
  string logicalOperator = 133;
}
message ImportExpression {
  Expression source = 134;
  SourceLocation loc = 135;
}
message FunctionExpression {
  Identifier id = 136;
  BlockStatement body = 137;
  SourceLocation loc = 138;
}
message BlockStatement {
  repeated Statement body = 139;
  SourceLocation loc = 140;
}
message ConditionalExpression {
  Expression test = 141;
  Expression alternate = 142;
  Expression consequent = 143;
  SourceLocation loc = 144;
}
message ClassExpression {
  Identifier id = 145;
  SourceLocation loc = 146;
}
message ChainExpression {
  ChainElement expression = 147;
  SourceLocation loc = 148;
}
message ChainElement {
  oneof chainElement {
    SimpleCallExpression chainElement_simpleCallExpression = 149;
    MemberExpression chainElement_memberExpression = 150;
  }
}
message SimpleCallExpression {
  bool optional = 151;
  SourceLocation loc = 152;
}
message CallExpression {
  oneof callExpression {
    SimpleCallExpression callExpression_simpleCallExpression = 153;
    NewExpression callExpression_newExpression = 154;
  }
}
message BinaryExpression {
  BinaryOperator operator = 155;
  Expression left = 156;
  Expression right = 157;
  SourceLocation loc = 158;
}
message BinaryOperator {
  string binaryOperator = 159;
}
message AwaitExpression {
  Expression argument = 160;
  SourceLocation loc = 161;
}
message AssignmentExpression {
  AssignmentOperator operator = 162;
  oneof left {
    Pattern left_pattern = 163;
    MemberExpression left_memberExpression = 164;
  }
  Expression right = 165;
  SourceLocation loc = 166;
}
message AssignmentOperator {
  string assignmentOperator = 167;
}
message ArrowFunctionExpression {
  bool expression = 168;
  oneof body {
    BlockStatement body_blockStatement = 169;
    Expression body_expression = 170;
  }
  SourceLocation loc = 171;
}
message ArrayExpression {
  repeated BaseNodeWithoutComments elements = 172;
  SourceLocation loc = 173;
}
message MaybeNamedClassDeclaration {
  Identifier id = 174;
  SourceLocation loc = 175;
}
message MaybeNamedFunctionDeclaration {
  Identifier id = 176;
  BlockStatement body = 177;
  SourceLocation loc = 178;
}
message ExportNamedDeclaration {
  Declaration declaration = 179;
  repeated ExportSpecifier specifiers = 180;
  Literal source = 181;
  SourceLocation loc = 182;
}
message ExportSpecifier {
  Identifier exported = 183;
  SourceLocation loc = 184;
}
message Declaration {
  oneof declaration {
    FunctionDeclaration declaration_functionDeclaration = 185;
    VariableDeclaration declaration_variableDeclaration = 186;
    ClassDeclaration declaration_classDeclaration = 187;
  }
}
message ClassDeclaration {
  Identifier id = 188;
  SourceLocation loc = 189;
}
message VariableDeclaration {
  repeated VariableDeclarator declarations = 190;
  string kind = 191;
  SourceLocation loc = 192;
}
message VariableDeclarator {
  Pattern id = 193;
  Expression init = 194;
  SourceLocation loc = 195;
}
message FunctionDeclaration {
  Identifier id = 196;
  SourceLocation loc = 197;
}
message ImportDeclaration {
  repeated BaseNodeWithoutComments specifiers = 198;
  Literal source = 199;
  SourceLocation loc = 200;
}
message ImportNamespaceSpecifier {
  SourceLocation loc = 201;
}
message ImportDefaultSpecifier {
  SourceLocation loc = 202;
}
message ImportSpecifier {
  Identifier imported = 203;
  SourceLocation loc = 204;
}
message Statement {
  oneof statement {
    ExpressionStatement statement_expressionStatement = 205;
    BlockStatement statement_blockStatement = 206;
    StaticBlock statement_staticBlock = 207;
    EmptyStatement statement_emptyStatement = 208;
    DebuggerStatement statement_debuggerStatement = 209;
    WithStatement statement_withStatement = 210;
    ReturnStatement statement_returnStatement = 211;
    LabeledStatement statement_labeledStatement = 212;
    BreakStatement statement_breakStatement = 213;
    ContinueStatement statement_continueStatement = 214;
    IfStatement statement_ifStatement = 215;
    SwitchStatement statement_switchStatement = 216;
    ThrowStatement statement_throwStatement = 217;
    TryStatement statement_tryStatement = 218;
    WhileStatement statement_whileStatement = 219;
    DoWhileStatement statement_doWhileStatement = 220;
    ForStatement statement_forStatement = 221;
    ForInStatement statement_forInStatement = 222;
    ForOfStatement statement_forOfStatement = 223;
    Declaration statement_declaration = 224;
  }
}
message ForOfStatement {
  bool await = 225;
  SourceLocation loc = 226;
}
message ForInStatement {
  SourceLocation loc = 227;
}
message ForStatement {
  oneof init {
    VariableDeclaration init_variableDeclaration = 228;
    Expression init_expression = 229;
  }
  Expression test = 230;
  Expression update = 231;
  Statement body = 232;
  SourceLocation loc = 233;
}
message DoWhileStatement {
  Statement body = 234;
  Expression test = 235;
  SourceLocation loc = 236;
}
message WhileStatement {
  Expression test = 237;
  Statement body = 238;
  SourceLocation loc = 239;
}
message TryStatement {
  BlockStatement block = 240;
  CatchClause handler = 241;
  BlockStatement finalizer = 242;
  SourceLocation loc = 243;
}
message CatchClause {
  Pattern param = 244;
  BlockStatement body = 245;
  SourceLocation loc = 246;
}
message ThrowStatement {
  Expression argument = 247;
  SourceLocation loc = 248;
}
message SwitchStatement {
  Expression discriminant = 249;
  repeated SwitchCase cases = 250;
  SourceLocation loc = 251;
}
message SwitchCase {
  Expression test = 252;
  repeated Statement consequent = 253;
  SourceLocation loc = 254;
}
message IfStatement {
  Expression test = 255;
  Statement consequent = 256;
  Statement alternate = 257;
  SourceLocation loc = 258;
}
message ContinueStatement {
  Identifier label = 259;
  SourceLocation loc = 260;
}
message BreakStatement {
  Identifier label = 261;
  SourceLocation loc = 262;
}
message LabeledStatement {
  Identifier label = 263;
  Statement body = 264;
  SourceLocation loc = 265;
}
message ReturnStatement {
  Expression argument = 266;
  SourceLocation loc = 267;
}
message WithStatement {
  Expression object = 268;
  Statement body = 269;
  SourceLocation loc = 270;
}
message DebuggerStatement {
  SourceLocation loc = 271;
}
message EmptyStatement {
  SourceLocation loc = 272;
}
message StaticBlock {
}
message ExpressionStatement {
  Expression expression = 273;
  SourceLocation loc = 274;
}
message Directive {
  Literal expression = 275;
  string directive = 276;
  SourceLocation loc = 277;
}
message BaseNodeWithoutComments {
  string type = 278;
  SourceLocation loc = 279;
  oneof node {
    Program node_program = 280;
    SourceLocation node_sourceLocation = 281;
    Position node_position = 282;
    ModuleDeclaration node_moduleDeclaration = 283;
    ExportAllDeclaration node_exportAllDeclaration = 284;
    Literal node_literal = 285;
    BigIntLiteral node_bigIntLiteral = 286;
    SimpleLiteral node_simpleLiteral = 287;
    Identifier node_identifier = 288;
    ExportDefaultDeclaration node_exportDefaultDeclaration = 289;
    Expression node_expression = 290;
    YieldExpression node_yieldExpression = 291;
    UpdateExpression node_updateExpression = 292;
    UpdateOperator node_updateOperator = 293;
    UnaryExpression node_unaryExpression = 294;
    UnaryOperator node_unaryOperator = 295;
    ThisExpression node_thisExpression = 296;
    TemplateLiteral node_templateLiteral = 297;
    TemplateElement node_templateElement = 298;
    TaggedTemplateExpression node_taggedTemplateExpression = 299;
    SequenceExpression node_sequenceExpression = 300;
    ObjectExpression node_objectExpression = 301;
    SpreadElement node_spreadElement = 302;
    Property node_property = 303;
    Pattern node_pattern = 304;
    AssignmentPattern node_assignmentPattern = 305;
    RestElement node_restElement = 306;
    ArrayPattern node_arrayPattern = 307;
    ObjectPattern node_objectPattern = 308;
    AssignmentProperty node_assignmentProperty = 309;
    PrivateIdentifier node_privateIdentifier = 310;
    NewExpression node_newExpression = 311;
    MetaProperty node_metaProperty = 312;
    MemberExpression node_memberExpression = 313;
    Super node_super = 314;
    LogicalExpression node_logicalExpression = 315;
    LogicalOperator node_logicalOperator = 316;
    ImportExpression node_importExpression = 317;
    FunctionExpression node_functionExpression = 318;
    BlockStatement node_blockStatement = 319;
    ConditionalExpression node_conditionalExpression = 320;
    ClassExpression node_classExpression = 321;
    ChainExpression node_chainExpression = 322;
    ChainElement node_chainElement = 323;
    SimpleCallExpression node_simpleCallExpression = 324;
    CallExpression node_callExpression = 325;
    BinaryExpression node_binaryExpression = 326;
    BinaryOperator node_binaryOperator = 327;
    AwaitExpression node_awaitExpression = 328;
    AssignmentExpression node_assignmentExpression = 329;
    AssignmentOperator node_assignmentOperator = 330;
    ArrowFunctionExpression node_arrowFunctionExpression = 331;
    ArrayExpression node_arrayExpression = 332;
    MaybeNamedClassDeclaration node_maybeNamedClassDeclaration = 333;
    MaybeNamedFunctionDeclaration node_maybeNamedFunctionDeclaration = 334;
    ExportNamedDeclaration node_exportNamedDeclaration = 335;
    ExportSpecifier node_exportSpecifier = 336;
    Declaration node_declaration = 337;
    ClassDeclaration node_classDeclaration = 338;
    VariableDeclaration node_variableDeclaration = 339;
    VariableDeclarator node_variableDeclarator = 340;
    FunctionDeclaration node_functionDeclaration = 341;
    ImportDeclaration node_importDeclaration = 342;
    ImportNamespaceSpecifier node_importNamespaceSpecifier = 343;
    ImportDefaultSpecifier node_importDefaultSpecifier = 344;
    ImportSpecifier node_importSpecifier = 345;
    Statement node_statement = 346;
    ForOfStatement node_forOfStatement = 347;
    ForInStatement node_forInStatement = 348;
    ForStatement node_forStatement = 349;
    DoWhileStatement node_doWhileStatement = 350;
    WhileStatement node_whileStatement = 351;
    TryStatement node_tryStatement = 352;
    CatchClause node_catchClause = 353;
    ThrowStatement node_throwStatement = 354;
    SwitchStatement node_switchStatement = 355;
    SwitchCase node_switchCase = 356;
    IfStatement node_ifStatement = 357;
    ContinueStatement node_continueStatement = 358;
    BreakStatement node_breakStatement = 359;
    LabeledStatement node_labeledStatement = 360;
    ReturnStatement node_returnStatement = 361;
    WithStatement node_withStatement = 362;
    DebuggerStatement node_debuggerStatement = 363;
    EmptyStatement node_emptyStatement = 364;
    StaticBlock node_staticBlock = 365;
    ExpressionStatement node_expressionStatement = 366;
    Directive node_directive = 367;
  }
}