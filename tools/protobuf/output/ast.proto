syntax = "proto3";

message Program {
  string sourceType = 1;
  repeated BaseNodeWithoutComments body = 2;
}
message ModuleDeclaration {
  oneof moduleDeclaration {
    ImportDeclaration moduleDeclaration_importDeclaration = 3;
    ExportNamedDeclaration moduleDeclaration_exportNamedDeclaration = 4;
    ExportDefaultDeclaration moduleDeclaration_exportDefaultDeclaration = 5;
    ExportAllDeclaration moduleDeclaration_exportAllDeclaration = 6;
  }
}
message ExportAllDeclaration {
  Identifier exported = 7;
  Literal source = 8;
}
message Literal {
  oneof literal {
    SimpleLiteral literal_simpleLiteral = 9;
    BigIntLiteral literal_bigIntLiteral = 10;
  }
}
message BigIntLiteral {
  int32 value = 11;
  string bigint = 12;
  string raw = 13;
}
message SimpleLiteral {
  oneof value {
    string value_string = 14;
    bool value_boolean = 15;
    int32 value_number = 16;
  }
  string raw = 17;
}
message Identifier {
  string name = 18;
}
message ExportDefaultDeclaration {
  oneof declaration {
    MaybeNamedFunctionDeclaration declaration_maybeNamedFunctionDeclaration = 19;
    MaybeNamedClassDeclaration declaration_maybeNamedClassDeclaration = 20;
    Expression declaration_expression = 21;
  }
}
message Expression {
  oneof expression {
    ArrayExpression expression_arrayExpression = 22;
    ArrowFunctionExpression expression_arrowFunctionExpression = 23;
    AssignmentExpression expression_assignmentExpression = 24;
    AwaitExpression expression_awaitExpression = 25;
    BinaryExpression expression_binaryExpression = 26;
    CallExpression expression_callExpression = 27;
    ChainExpression expression_chainExpression = 28;
    ClassExpression expression_classExpression = 29;
    ConditionalExpression expression_conditionalExpression = 30;
    FunctionExpression expression_functionExpression = 31;
    Identifier expression_identifier = 32;
    ImportExpression expression_importExpression = 33;
    Literal expression_literal = 34;
    LogicalExpression expression_logicalExpression = 35;
    MemberExpression expression_memberExpression = 36;
    MetaProperty expression_metaProperty = 37;
    NewExpression expression_newExpression = 38;
    ObjectExpression expression_objectExpression = 39;
    SequenceExpression expression_sequenceExpression = 40;
    TaggedTemplateExpression expression_taggedTemplateExpression = 41;
    TemplateLiteral expression_templateLiteral = 42;
    ThisExpression expression_thisExpression = 43;
    UnaryExpression expression_unaryExpression = 44;
    UpdateExpression expression_updateExpression = 45;
    YieldExpression expression_yieldExpression = 46;
  }
}
message YieldExpression {
  Expression argument = 47;
  bool delegate = 48;
}
message UpdateExpression {
  UpdateOperator operator = 49;
  Expression argument = 50;
  bool prefix = 51;
}
message UpdateOperator {
  string updateOperator = 52;
}
message UnaryExpression {
  UnaryOperator operator = 53;
  bool prefix = 54;
  Expression argument = 55;
}
message UnaryOperator {
  string unaryOperator = 56;
}
message ThisExpression {
}
message TemplateLiteral {
  repeated TemplateElement quasis = 57;
  repeated Expression expressions = 58;
}
message TemplateElement {
  bool tail = 59;
  ERROR_UNEXPECTED value = 60;
}
message TaggedTemplateExpression {
  Expression tag = 61;
  TemplateLiteral quasi = 62;
}
message SequenceExpression {
  repeated Expression expressions = 63;
}
message ObjectExpression {
  repeated BaseNodeWithoutComments properties = 64;
}
message SpreadElement {
  Expression argument = 65;
}
message Property {
  oneof key {
    Expression key_expression = 66;
    PrivateIdentifier key_privateIdentifier = 67;
  }
  oneof value {
    Expression value_expression = 68;
    Pattern value_pattern = 69;
  }
  string kind = 70;
  bool method = 71;
  bool shorthand = 72;
  bool computed = 73;
}
message Pattern {
  oneof pattern {
    Identifier pattern_identifier = 74;
    ObjectPattern pattern_objectPattern = 75;
    ArrayPattern pattern_arrayPattern = 76;
    RestElement pattern_restElement = 77;
    AssignmentPattern pattern_assignmentPattern = 78;
    MemberExpression pattern_memberExpression = 79;
  }
}
message AssignmentPattern {
  Pattern left = 80;
  Expression right = 81;
}
message RestElement {
  Pattern argument = 82;
}
message ArrayPattern {
  repeated Pattern elements = 83;
}
message ObjectPattern {
  repeated BaseNodeWithoutComments properties = 84;
}
message AssignmentProperty {
  Pattern value = 85;
  string kind = 86;
  bool method = 87;
}
message PrivateIdentifier {
  string name = 88;
}
message NewExpression {
}
message MetaProperty {
  Identifier meta = 89;
  Identifier property = 90;
}
message MemberExpression {
  oneof object {
    Expression object_expression = 91;
    Super object_super = 92;
  }
  oneof property {
    Expression property_expression = 93;
    PrivateIdentifier property_privateIdentifier = 94;
  }
  bool computed = 95;
  bool optional = 96;
}
message Super {
}
message LogicalExpression {
  LogicalOperator operator = 97;
  Expression left = 98;
  Expression right = 99;
}
message LogicalOperator {
  string logicalOperator = 100;
}
message ImportExpression {
  Expression source = 101;
}
message FunctionExpression {
  Identifier id = 102;
  BlockStatement body = 103;
}
message BlockStatement {
  repeated Statement body = 104;
}
message ConditionalExpression {
  Expression test = 105;
  Expression alternate = 106;
  Expression consequent = 107;
}
message ClassExpression {
  Identifier id = 108;
}
message ChainExpression {
  ChainElement expression = 109;
}
message ChainElement {
  oneof chainElement {
    SimpleCallExpression chainElement_simpleCallExpression = 110;
    MemberExpression chainElement_memberExpression = 111;
  }
}
message SimpleCallExpression {
  bool optional = 112;
}
message CallExpression {
  oneof callExpression {
    SimpleCallExpression callExpression_simpleCallExpression = 113;
    NewExpression callExpression_newExpression = 114;
  }
}
message BinaryExpression {
  BinaryOperator operator = 115;
  Expression left = 116;
  Expression right = 117;
}
message BinaryOperator {
  string binaryOperator = 118;
}
message AwaitExpression {
  Expression argument = 119;
}
message AssignmentExpression {
  AssignmentOperator operator = 120;
  oneof left {
    Pattern left_pattern = 121;
    MemberExpression left_memberExpression = 122;
  }
  Expression right = 123;
}
message AssignmentOperator {
  string assignmentOperator = 124;
}
message ArrowFunctionExpression {
  bool expression = 125;
  oneof body {
    BlockStatement body_blockStatement = 126;
    Expression body_expression = 127;
  }
}
message ArrayExpression {
  repeated BaseNodeWithoutComments elements = 128;
}
message MaybeNamedClassDeclaration {
  Identifier id = 129;
}
message MaybeNamedFunctionDeclaration {
  Identifier id = 130;
  BlockStatement body = 131;
}
message ExportNamedDeclaration {
  Declaration declaration = 132;
  repeated ExportSpecifier specifiers = 133;
  Literal source = 134;
}
message ExportSpecifier {
  Identifier exported = 135;
}
message Declaration {
  oneof declaration {
    FunctionDeclaration declaration_functionDeclaration = 136;
    VariableDeclaration declaration_variableDeclaration = 137;
    ClassDeclaration declaration_classDeclaration = 138;
  }
}
message ClassDeclaration {
  Identifier id = 139;
}
message VariableDeclaration {
  repeated VariableDeclarator declarations = 140;
  string kind = 141;
}
message VariableDeclarator {
  Pattern id = 142;
  Expression init = 143;
}
message FunctionDeclaration {
  Identifier id = 144;
}
message ImportDeclaration {
  repeated BaseNodeWithoutComments specifiers = 145;
  Literal source = 146;
}
message ImportNamespaceSpecifier {
}
message ImportDefaultSpecifier {
}
message ImportSpecifier {
  Identifier imported = 147;
}
message Statement {
  oneof statement {
    ExpressionStatement statement_expressionStatement = 148;
    BlockStatement statement_blockStatement = 149;
    StaticBlock statement_staticBlock = 150;
    EmptyStatement statement_emptyStatement = 151;
    DebuggerStatement statement_debuggerStatement = 152;
    WithStatement statement_withStatement = 153;
    ReturnStatement statement_returnStatement = 154;
    LabeledStatement statement_labeledStatement = 155;
    BreakStatement statement_breakStatement = 156;
    ContinueStatement statement_continueStatement = 157;
    IfStatement statement_ifStatement = 158;
    SwitchStatement statement_switchStatement = 159;
    ThrowStatement statement_throwStatement = 160;
    TryStatement statement_tryStatement = 161;
    WhileStatement statement_whileStatement = 162;
    DoWhileStatement statement_doWhileStatement = 163;
    ForStatement statement_forStatement = 164;
    ForInStatement statement_forInStatement = 165;
    ForOfStatement statement_forOfStatement = 166;
    Declaration statement_declaration = 167;
  }
}
message ForOfStatement {
  bool await = 168;
}
message ForInStatement {
}
message ForStatement {
  oneof init {
    VariableDeclaration init_variableDeclaration = 169;
    Expression init_expression = 170;
  }
  Expression test = 171;
  Expression update = 172;
  Statement body = 173;
}
message DoWhileStatement {
  Statement body = 174;
  Expression test = 175;
}
message WhileStatement {
  Expression test = 176;
  Statement body = 177;
}
message TryStatement {
  BlockStatement block = 178;
  CatchClause handler = 179;
  BlockStatement finalizer = 180;
}
message CatchClause {
  Pattern param = 181;
  BlockStatement body = 182;
}
message ThrowStatement {
  Expression argument = 183;
}
message SwitchStatement {
  Expression discriminant = 184;
  repeated SwitchCase cases = 185;
}
message SwitchCase {
  Expression test = 186;
  repeated Statement consequent = 187;
}
message IfStatement {
  Expression test = 188;
  Statement consequent = 189;
  Statement alternate = 190;
}
message ContinueStatement {
  Identifier label = 191;
}
message BreakStatement {
  Identifier label = 192;
}
message LabeledStatement {
  Identifier label = 193;
  Statement body = 194;
}
message ReturnStatement {
  Expression argument = 195;
}
message WithStatement {
  Expression object = 196;
  Statement body = 197;
}
message DebuggerStatement {
}
message EmptyStatement {
}
message StaticBlock {
}
message ExpressionStatement {
  Expression expression = 198;
}
message Directive {
  Literal expression = 199;
  string directive = 200;
}
message BaseNodeWithoutComments {
  string type = 201;
  SourceLocation loc = 202;
  oneof node {
    Program node_program = 203;
    ModuleDeclaration node_moduleDeclaration = 204;
    ExportAllDeclaration node_exportAllDeclaration = 205;
    Literal node_literal = 206;
    BigIntLiteral node_bigIntLiteral = 207;
    SimpleLiteral node_simpleLiteral = 208;
    Identifier node_identifier = 209;
    ExportDefaultDeclaration node_exportDefaultDeclaration = 210;
    Expression node_expression = 211;
    YieldExpression node_yieldExpression = 212;
    UpdateExpression node_updateExpression = 213;
    UpdateOperator node_updateOperator = 214;
    UnaryExpression node_unaryExpression = 215;
    UnaryOperator node_unaryOperator = 216;
    ThisExpression node_thisExpression = 217;
    TemplateLiteral node_templateLiteral = 218;
    TemplateElement node_templateElement = 219;
    TaggedTemplateExpression node_taggedTemplateExpression = 220;
    SequenceExpression node_sequenceExpression = 221;
    ObjectExpression node_objectExpression = 222;
    SpreadElement node_spreadElement = 223;
    Property node_property = 224;
    Pattern node_pattern = 225;
    AssignmentPattern node_assignmentPattern = 226;
    RestElement node_restElement = 227;
    ArrayPattern node_arrayPattern = 228;
    ObjectPattern node_objectPattern = 229;
    AssignmentProperty node_assignmentProperty = 230;
    PrivateIdentifier node_privateIdentifier = 231;
    NewExpression node_newExpression = 232;
    MetaProperty node_metaProperty = 233;
    MemberExpression node_memberExpression = 234;
    Super node_super = 235;
    LogicalExpression node_logicalExpression = 236;
    LogicalOperator node_logicalOperator = 237;
    ImportExpression node_importExpression = 238;
    FunctionExpression node_functionExpression = 239;
    BlockStatement node_blockStatement = 240;
    ConditionalExpression node_conditionalExpression = 241;
    ClassExpression node_classExpression = 242;
    ChainExpression node_chainExpression = 243;
    ChainElement node_chainElement = 244;
    SimpleCallExpression node_simpleCallExpression = 245;
    CallExpression node_callExpression = 246;
    BinaryExpression node_binaryExpression = 247;
    BinaryOperator node_binaryOperator = 248;
    AwaitExpression node_awaitExpression = 249;
    AssignmentExpression node_assignmentExpression = 250;
    AssignmentOperator node_assignmentOperator = 251;
    ArrowFunctionExpression node_arrowFunctionExpression = 252;
    ArrayExpression node_arrayExpression = 253;
    MaybeNamedClassDeclaration node_maybeNamedClassDeclaration = 254;
    MaybeNamedFunctionDeclaration node_maybeNamedFunctionDeclaration = 255;
    ExportNamedDeclaration node_exportNamedDeclaration = 256;
    ExportSpecifier node_exportSpecifier = 257;
    Declaration node_declaration = 258;
    ClassDeclaration node_classDeclaration = 259;
    VariableDeclaration node_variableDeclaration = 260;
    VariableDeclarator node_variableDeclarator = 261;
    FunctionDeclaration node_functionDeclaration = 262;
    ImportDeclaration node_importDeclaration = 263;
    ImportNamespaceSpecifier node_importNamespaceSpecifier = 264;
    ImportDefaultSpecifier node_importDefaultSpecifier = 265;
    ImportSpecifier node_importSpecifier = 266;
    Statement node_statement = 267;
    ForOfStatement node_forOfStatement = 268;
    ForInStatement node_forInStatement = 269;
    ForStatement node_forStatement = 270;
    DoWhileStatement node_doWhileStatement = 271;
    WhileStatement node_whileStatement = 272;
    TryStatement node_tryStatement = 273;
    CatchClause node_catchClause = 274;
    ThrowStatement node_throwStatement = 275;
    SwitchStatement node_switchStatement = 276;
    SwitchCase node_switchCase = 277;
    IfStatement node_ifStatement = 278;
    ContinueStatement node_continueStatement = 279;
    BreakStatement node_breakStatement = 280;
    LabeledStatement node_labeledStatement = 281;
    ReturnStatement node_returnStatement = 282;
    WithStatement node_withStatement = 283;
    DebuggerStatement node_debuggerStatement = 284;
    EmptyStatement node_emptyStatement = 285;
    StaticBlock node_staticBlock = 286;
    ExpressionStatement node_expressionStatement = 287;
    Directive node_directive = 288;
  }
}
message SourceLocation {
  string source = 289;
  Position start = 290;
  Position end = 291;
}
message Position {
  int32 line = 292;
  int32 end = 293;
}