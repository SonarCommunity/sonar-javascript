syntax = "proto3";

message Program {
  string sourceType = 1;
  repeated undefined body = 2;
}
message ModuleDeclaration {
  oneof ModuleDeclaration {
    ImportDeclaration ModuleDeclaration_importDeclaration = 1;
    ExportNamedDeclaration ModuleDeclaration_exportNamedDeclaration = 2;
    ExportDefaultDeclaration ModuleDeclaration_exportDefaultDeclaration = 3;
    ExportAllDeclaration ModuleDeclaration_exportAllDeclaration = 4;
  }
}
message ExportAllDeclaration {
  Identifier exported = 1;
  Literal source = 2;
}
message Literal {
  oneof Literal {
    SimpleLiteral Literal_simpleLiteral = 1;
    BigIntLiteral Literal_bigIntLiteral = 2;
  }
}
message BigIntLiteral {
  int32 value = 1;
  string bigint = 2;
  string raw = 3;
}
message SimpleLiteral {
  oneof value {
    string value_string = 1;
    bool value_boolean = 2;
    int32 value_number = 3;
  }
  string raw = 4;
}
message Identifier {
  string name = 1;
}
message ExportDefaultDeclaration {
  oneof declaration {
    MaybeNamedFunctionDeclaration declaration_maybeNamedFunctionDeclaration = 1;
    MaybeNamedClassDeclaration declaration_maybeNamedClassDeclaration = 2;
    Expression declaration_expression = 3;
  }
}
message Expression {
  oneof Expression {
    ArrayExpression Expression_arrayExpression = 1;
    ArrowFunctionExpression Expression_arrowFunctionExpression = 2;
    AssignmentExpression Expression_assignmentExpression = 3;
    AwaitExpression Expression_awaitExpression = 4;
    BinaryExpression Expression_binaryExpression = 5;
    CallExpression Expression_callExpression = 6;
    ChainExpression Expression_chainExpression = 7;
    ClassExpression Expression_classExpression = 8;
    ConditionalExpression Expression_conditionalExpression = 9;
    FunctionExpression Expression_functionExpression = 10;
    Identifier Expression_identifier = 11;
    ImportExpression Expression_importExpression = 12;
    Literal Expression_literal = 13;
    LogicalExpression Expression_logicalExpression = 14;
    MemberExpression Expression_memberExpression = 15;
    MetaProperty Expression_metaProperty = 16;
    NewExpression Expression_newExpression = 17;
    ObjectExpression Expression_objectExpression = 18;
    SequenceExpression Expression_sequenceExpression = 19;
    TaggedTemplateExpression Expression_taggedTemplateExpression = 20;
    TemplateLiteral Expression_templateLiteral = 21;
    ThisExpression Expression_thisExpression = 22;
    UnaryExpression Expression_unaryExpression = 23;
    UpdateExpression Expression_updateExpression = 24;
    YieldExpression Expression_yieldExpression = 25;
  }
}
message YieldExpression {
  Expression argument = 1;
  bool delegate = 2;
}
message UpdateExpression {
  UpdateOperator operator = 1;
  Expression argument = 2;
  bool prefix = 3;
}
message UpdateOperator {
  string UpdateOperator = 1;
}
message UnaryExpression {
  UnaryOperator operator = 1;
  bool prefix = 2;
  Expression argument = 3;
}
message UnaryOperator {
  string UnaryOperator = 1;
}
message ThisExpression {
}
message TemplateLiteral {
  repeated TemplateElement quasis = 1;
  repeated Expression expressions = 2;
}
message TemplateElement {
  bool tail = 1;
  ERROR_UNEXPECTED value = 2;
}
message TaggedTemplateExpression {
  Expression tag = 1;
  TemplateLiteral quasi = 2;
}
message SequenceExpression {
  repeated Expression expressions = 1;
}
message ObjectExpression {
  repeated undefined properties = 1;
}
message SpreadElement {
  Expression argument = 1;
}
message Property {
  oneof key {
    Expression key_expression = 1;
    PrivateIdentifier key_privateIdentifier = 2;
  }
  oneof value {
    Expression value_expression = 3;
    Pattern value_pattern = 4;
  }
  string kind = 5;
  bool method = 6;
  bool shorthand = 7;
  bool computed = 8;
}
message Pattern {
  oneof Pattern {
    Identifier Pattern_identifier = 1;
    ObjectPattern Pattern_objectPattern = 2;
    ArrayPattern Pattern_arrayPattern = 3;
    RestElement Pattern_restElement = 4;
    AssignmentPattern Pattern_assignmentPattern = 5;
    MemberExpression Pattern_memberExpression = 6;
  }
}
message AssignmentPattern {
  Pattern left = 1;
  Expression right = 2;
}
message RestElement {
  Pattern argument = 1;
}
message ArrayPattern {
  repeated Pattern elements = 1;
}
message ObjectPattern {
  repeated undefined properties = 1;
}
message AssignmentProperty {
  Pattern value = 1;
  string kind = 2;
  bool method = 3;
}
message PrivateIdentifier {
  string name = 1;
}
message NewExpression {
}
message MetaProperty {
  Identifier meta = 1;
  Identifier property = 2;
}
message MemberExpression {
  oneof object {
    Expression object_expression = 1;
    Super object_super = 2;
  }
  oneof property {
    Expression property_expression = 3;
    PrivateIdentifier property_privateIdentifier = 4;
  }
  bool computed = 5;
  bool optional = 6;
}
message Super {
}
message LogicalExpression {
  LogicalOperator operator = 1;
  Expression left = 2;
  Expression right = 3;
}
message LogicalOperator {
  string LogicalOperator = 1;
}
message ImportExpression {
  Expression source = 1;
}
message FunctionExpression {
  Identifier id = 1;
  BlockStatement body = 2;
}
message BlockStatement {
  repeated Statement body = 1;
}
message ConditionalExpression {
  Expression test = 1;
  Expression alternate = 2;
  Expression consequent = 3;
}
message ClassExpression {
  Identifier id = 1;
}
message ChainExpression {
  ChainElement expression = 1;
}
message ChainElement {
  oneof ChainElement {
    SimpleCallExpression ChainElement_simpleCallExpression = 1;
    MemberExpression ChainElement_memberExpression = 2;
  }
}
message SimpleCallExpression {
  bool optional = 1;
}
message CallExpression {
  oneof CallExpression {
    SimpleCallExpression CallExpression_simpleCallExpression = 1;
    NewExpression CallExpression_newExpression = 2;
  }
}
message BinaryExpression {
  BinaryOperator operator = 1;
  Expression left = 2;
  Expression right = 3;
}
message BinaryOperator {
  string BinaryOperator = 1;
}
message AwaitExpression {
  Expression argument = 1;
}
message AssignmentExpression {
  AssignmentOperator operator = 1;
  oneof left {
    Pattern left_pattern = 2;
    MemberExpression left_memberExpression = 3;
  }
  Expression right = 4;
}
message AssignmentOperator {
  string AssignmentOperator = 1;
}
message ArrowFunctionExpression {
  bool expression = 1;
  oneof body {
    BlockStatement body_blockStatement = 2;
    Expression body_expression = 3;
  }
}
message ArrayExpression {
  repeated undefined elements = 1;
}
message MaybeNamedClassDeclaration {
  Identifier id = 1;
}
message MaybeNamedFunctionDeclaration {
  Identifier id = 1;
  BlockStatement body = 2;
}
message ExportNamedDeclaration {
  Declaration declaration = 1;
  repeated ExportSpecifier specifiers = 2;
  Literal source = 3;
}
message ExportSpecifier {
  Identifier exported = 1;
}
message Declaration {
  oneof Declaration {
    FunctionDeclaration Declaration_functionDeclaration = 1;
    VariableDeclaration Declaration_variableDeclaration = 2;
    ClassDeclaration Declaration_classDeclaration = 3;
  }
}
message ClassDeclaration {
  Identifier id = 1;
}
message VariableDeclaration {
  repeated VariableDeclarator declarations = 1;
  string kind = 2;
}
message VariableDeclarator {
  Pattern id = 1;
  Expression init = 2;
}
message FunctionDeclaration {
  Identifier id = 1;
}
message ImportDeclaration {
  repeated undefined specifiers = 1;
  Literal source = 2;
}
message ImportNamespaceSpecifier {
}
message ImportDefaultSpecifier {
}
message ImportSpecifier {
  Identifier imported = 1;
}
message Statement {
  oneof Statement {
    ExpressionStatement Statement_expressionStatement = 1;
    BlockStatement Statement_blockStatement = 2;
    StaticBlock Statement_staticBlock = 3;
    EmptyStatement Statement_emptyStatement = 4;
    DebuggerStatement Statement_debuggerStatement = 5;
    WithStatement Statement_withStatement = 6;
    ReturnStatement Statement_returnStatement = 7;
    LabeledStatement Statement_labeledStatement = 8;
    BreakStatement Statement_breakStatement = 9;
    ContinueStatement Statement_continueStatement = 10;
    IfStatement Statement_ifStatement = 11;
    SwitchStatement Statement_switchStatement = 12;
    ThrowStatement Statement_throwStatement = 13;
    TryStatement Statement_tryStatement = 14;
    WhileStatement Statement_whileStatement = 15;
    DoWhileStatement Statement_doWhileStatement = 16;
    ForStatement Statement_forStatement = 17;
    ForInStatement Statement_forInStatement = 18;
    ForOfStatement Statement_forOfStatement = 19;
    Declaration Statement_declaration = 20;
  }
}
message ForOfStatement {
  bool await = 1;
}
message ForInStatement {
}
message ForStatement {
  oneof init {
    VariableDeclaration init_variableDeclaration = 1;
    Expression init_expression = 2;
  }
  Expression test = 3;
  Expression update = 4;
  Statement body = 5;
}
message DoWhileStatement {
  Statement body = 1;
  Expression test = 2;
}
message WhileStatement {
  Expression test = 1;
  Statement body = 2;
}
message TryStatement {
  BlockStatement block = 1;
  CatchClause handler = 2;
  BlockStatement finalizer = 3;
}
message CatchClause {
  Pattern param = 1;
  BlockStatement body = 2;
}
message ThrowStatement {
  Expression argument = 1;
}
message SwitchStatement {
  Expression discriminant = 1;
  repeated SwitchCase cases = 2;
}
message SwitchCase {
  Expression test = 1;
  repeated Statement consequent = 2;
}
message IfStatement {
  Expression test = 1;
  Statement consequent = 2;
  Statement alternate = 3;
}
message ContinueStatement {
  Identifier label = 1;
}
message BreakStatement {
  Identifier label = 1;
}
message LabeledStatement {
  Identifier label = 1;
  Statement body = 2;
}
message ReturnStatement {
  Expression argument = 1;
}
message WithStatement {
  Expression object = 1;
  Statement body = 2;
}
message DebuggerStatement {
}
message EmptyStatement {
}
message StaticBlock {
}
message ExpressionStatement {
  Expression expression = 1;
}
message Directive {
  Literal expression = 1;
  string directive = 2;
}
message BaseNodeWithoutComments {
  SourceLocation loc = 1;
}
message SourceLocation {
  string source = 1;
  Position start = 2;
  Position end = 3;
}
message Position {
  int32 line = 1;
  int32 column = 2;
}