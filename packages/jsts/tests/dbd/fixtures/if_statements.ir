if_statements.if_stmt (param#1) {
bb0:
  brif bb1, bb2, 1#2
bb1:
  x#3 = call #id#(1#2):int
  br bb2
bb2:
  x#5 = call #id#(999#4):int
  return null#0
}
if_statements.return_in_if () {
bb0:
  brif bb1, bb2, 1#1
bb1:
  return 42#2
bb2:
  x#4 = call #id#(999#3):int
  return null#0
}
if_statements.if_else (param#1) {
bb0:
  brif bb1, bb2, 1#2
bb1:
  x#3 = call #id#(1#2):int
  br bb3
bb2:
  x#5 = call #id#(2#4):int
  br bb3
bb3:
  x#7 = call #id#(999#6):int
  return null#0
}
if_statements.return_in_else (param#1) {
bb0:
  brif bb1, bb2, 1#2
bb1:
  x#3 = call #id#(1#2):int
  br bb3
bb2:
  return 2#4
bb3:
  x#6 = call #id#(999#5):int
  return null#0
}
if_statements.return_in_if_and_else (param#1) {
bb0:
  brif bb1, bb2, 1#2
bb1:
  return 1#2
bb2:
  return 2#3
bb3:
  x#5 = call #id#(999#4):int
  return null#0
}
if_statements.if_elif_else (param1#1, param2#2) {
bb0:
  brif bb1, bb2, 1#3
bb1:
  x#4 = call #id#(1#3):int
  br bb5
bb2:
  brif bb3, bb4, 2#5
bb3:
  x#6 = call #id#(2#5):int
  br bb5
bb4:
  x#8 = call #id#(3#7):int
  br bb5
bb5:
  x#10 = call #id#(999#9):int
  return null#0
}
if_statements.return_in_elif (param1#1, param2#2) {
bb0:
  brif bb1, bb2, 1#3
bb1:
  x#4 = call #id#(1#3):int
  br bb5
bb2:
  brif bb3, bb4, 2#5
bb3:
  return 2#5
bb4:
  x#7 = call #id#(3#6):int
  br bb5
bb5:
  x#9 = call #id#(999#8):int
  return null#0
}
if_statements.two_elif (param1#1, param2#2) {
bb0:
  brif bb1, bb2, 1#3
bb1:
  x#4 = call #id#(1#3):int
  br bb7
bb2:
  brif bb3, bb4, 2#5
bb3:
  x#6 = call #id#(2#5):int
  br bb7
bb4:
  brif bb5, bb6, 3#7
bb5:
  x#8 = call #id#(3#7):int
  br bb7
bb6:
  x#10 = call #id#(4#9):int
  br bb7
bb7:
  x#12 = call #id#(999#11):int
  return null#0
}
if_statements.if_elif (param1#1, param2#2) {
bb0:
  brif bb1, bb2, 1#3
bb1:
  x#4 = call #id#(1#3):int
  br bb4
bb2:
  brif bb3, bb4, 2#5
bb3:
  x#6 = call #id#(2#5):int
  br bb4
bb4:
  x#8 = call #id#(999#7):int
  return null#0
}
if_statements.nested_if () {
bb0:
  brif bb1, bb2, 1#1
bb1:
  brif bb3, bb4, 2#2
bb2:
  x#6 = call #id#(999#5):int
  return null#0
bb3:
  x#3 = call #id#(1#1):int
  br bb4
bb4:
  x#4 = call #id#(2#2):int
  br bb2
}
if_statements.condition_as_parameter (condition#1) {
bb0:
  brif bb1, bb2, param condition#1
bb1:
  x#3 = call #id#(1#2):int
  br bb2
bb2:
  #5 = call #unaryop !#(param condition#1):bool
  brif bb3, bb4, #5
bb3:
  x#7 = call #id#(2#6):int
  br bb4
bb4:
  brif bb5, bb6, param condition#1
bb5:
  x#9 = call #id#(999#8):int
  br bb6
bb6:
  return null#0
}
if_statements.foo (param#1) {
bb0:
  #2 = call #unknown-expression#()
  return null#0
}
if_statements.multiple_assignments (condition#1) {
bb0:
  brif bb1, bb2, param condition#1
bb1:
  x#3 = call #id#(1#2):int
  br bb3
bb2:
  x#5 = call #id#(2#4):int
  br bb3
bb3:
  x#7 = phi(bb1: x#3, bb2: x#5)
  #8 = call if_statements.foo(x#7)
  return null#0
}
if_statements.missing_assignment (condition#1) {
bb0:
  brif bb1, bb2, param condition#1
bb1:
  x#3 = call #id#(1#2):int
  br bb3
bb2:
  y#5 = call #id#(42#4):int
  br bb3
bb3:
  x#7 = phi(bb1: x#3, bb2: unbound#6)
  #8 = call if_statements.foo(x#7)
  return null#0
}
if_statements.cond_expression (p#1) {
bb0:
  brif bb1, bb2, param p#1
bb1:
  br bb3
bb2:
  br bb3
bb3:
  x#3 = phi(bb1: null#0, bb2: 42#2)
  #4 = call #get-field# some(x#3)
  return null#0
}
if_statements.nested_conditional_expressions (x#1, y#2) {
bb0:
  #4 = call #binop >#(param x#1, 42#3)
  brif bb1, bb2, #4
bb1:
  #5 = call #binop +#(param x#1, param y#2)
  br bb3
bb2:
  #7 = call #binop !=#(0#6, param y#2)
  brif bb4, bb5, #7
bb3:
  #10 = phi(bb1: #5, bb6: #9)
  return #10
bb4:
  #8 = call #binop -#(param x#1, param y#2)
  br bb6
bb5:
  br bb6
bb6:
  #9 = phi(bb4: #8, bb5: 0#6)
  br bb3
}
if_statements.if_without_else () {
bb0:
  brif bb1, bb2, 1#1
bb1:
  x#3 = call #id#(2#2):int
  br bb2
bb2:
  x#5 = phi(bb0: unbound#4, bb1: x#3)
  x#6 = call if_statements.foo(x#5)
  #7 = call #unknown-expression#()
  #9 = call #binop is#(#7, 3#8)
  brif bb3, bb4, #9
bb3:
  #10 = call #unknown-expression#()
  #11 = call print(#10):NoneType
  br bb4
bb4:
  return null#0
}
