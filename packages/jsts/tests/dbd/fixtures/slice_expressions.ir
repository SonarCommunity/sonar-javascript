slice_expressions.slice_exp () {
bb0:
  l1#1 = call #new-object#():list
  #3 = call #array-add-last#(l1#1, 1#2)
  #5 = call #array-add-last#(l1#1, 2#4)
  #7 = call #array-add-last#(l1#1, 3#6)
  #9 = call #array-add-last#(l1#1, 4#8)
  #11 = call #array-add-last#(l1#1, 5#10)
  l2#12 = call #new-object#():list
  #13 = call #array-read#(l1#1, 1#2)
  #14 = call #array-add-last#(l2#12, #13)
  #15 = call #array-read#(l1#1, 2#4)
  #16 = call #array-add-last#(l2#12, #15)
  return l2#12
}
slice_expressions.slice_exp_start () {
bb0:
  l1#1 = call #new-object#():list
  #3 = call #array-add-last#(l1#1, 1#2)
  #5 = call #array-add-last#(l1#1, 2#4)
  #7 = call #array-add-last#(l1#1, 3#6)
  #9 = call #array-add-last#(l1#1, 4#8)
  #11 = call #array-add-last#(l1#1, 5#10)
  l2#12 = call #new-object#():list
  l2#13 = call #array-add-all#(l2#12, l1#1, 2#4)
  return l2#13
}
slice_expressions.slice_exp_stop () {
bb0:
  l1#1 = call #new-object#():list
  #3 = call #array-add-last#(l1#1, 1#2)
  #5 = call #array-add-last#(l1#1, 2#4)
  #7 = call #array-add-last#(l1#1, 3#6)
  #9 = call #array-add-last#(l1#1, 4#8)
  #11 = call #array-add-last#(l1#1, 5#10)
  l2#12 = call #new-object#():list
  #14 = call #array-read#(l1#1, 0#13)
  #15 = call #array-add-last#(l2#12, #14)
  #16 = call #array-read#(l1#1, 1#2)
  #17 = call #array-add-last#(l2#12, #16)
  return l2#12
}
slice_expressions.slice_exp_all () {
bb0:
  l1#1 = call #new-object#():list
  #3 = call #array-add-last#(l1#1, 1#2)
  #5 = call #array-add-last#(l1#1, 2#4)
  #7 = call #array-add-last#(l1#1, 3#6)
  #9 = call #array-add-last#(l1#1, 4#8)
  #11 = call #array-add-last#(l1#1, 5#10)
  l2#12 = call #new-object#():list
  l2#14 = call #array-add-all#(l2#12, l1#1, 0#13)
  return l2#14
}
slice_expressions.slice_exp_negative_index () {
bb0:
  l1#1 = call #new-object#():list
  #3 = call #array-add-last#(l1#1, 1#2)
  #5 = call #array-add-last#(l1#1, 2#4)
  #7 = call #array-add-last#(l1#1, 3#6)
  #9 = call #array-add-last#(l1#1, 4#8)
  #11 = call #array-add-last#(l1#1, 5#10)
  l2#12 = call #unknown-expression#()
  return l2#12
}
slice_expressions.slice_exp_negative_upper_bound () {
bb0:
  l1#1 = call #new-object#():list
  #3 = call #array-add-last#(l1#1, 1#2)
  #5 = call #array-add-last#(l1#1, 2#4)
  #7 = call #array-add-last#(l1#1, 3#6)
  #9 = call #array-add-last#(l1#1, 4#8)
  #11 = call #array-add-last#(l1#1, 5#10)
  l2#12 = call #unknown-expression#()
  return l2#12
}
slice_expressions.slice_exp_step () {
bb0:
  l1#1 = call #new-object#():list
  #3 = call #array-add-last#(l1#1, 1#2)
  #5 = call #array-add-last#(l1#1, 2#4)
  #7 = call #array-add-last#(l1#1, 3#6)
  #9 = call #array-add-last#(l1#1, 4#8)
  #11 = call #array-add-last#(l1#1, 5#10)
  l2#12 = call #new-object#():list
  #14 = call #array-read#(l1#1, 0#13)
  #15 = call #array-add-last#(l2#12, #14)
  #16 = call #array-read#(l1#1, 2#4)
  #17 = call #array-add-last#(l2#12, #16)
  return l2#12
}
slice_expressions.slice_exp_reverse () {
bb0:
  l1#1 = call #new-object#():list
  #3 = call #array-add-last#(l1#1, 1#2)
  #5 = call #array-add-last#(l1#1, 2#4)
  #7 = call #array-add-last#(l1#1, 3#6)
  #9 = call #array-add-last#(l1#1, 4#8)
  #11 = call #array-add-last#(l1#1, 5#10)
  l2#12 = call #unknown-expression#()
  return l2#12
}
slice_expressions.slice_exp_illegal_slice () {
bb0:
  l1#1 = call #new-object#():list
  #3 = call #array-add-last#(l1#1, 1#2)
  #5 = call #array-add-last#(l1#1, 2#4)
  #7 = call #array-add-last#(l1#1, 3#6)
  #9 = call #array-add-last#(l1#1, 4#8)
  #11 = call #array-add-last#(l1#1, 5#10)
  l2#12 = call #unknown-expression#()
  return l2#12
}
slice_expressions.slice_exp_illegal_step () {
bb0:
  l1#1 = call #new-object#():list
  #3 = call #array-add-last#(l1#1, 1#2)
  #5 = call #array-add-last#(l1#1, 2#4)
  #7 = call #array-add-last#(l1#1, 3#6)
  #9 = call #array-add-last#(l1#1, 4#8)
  #11 = call #array-add-last#(l1#1, 5#10)
  l2#12 = call #unknown-expression#()
  return l2#12
}
slice_expressions.slice_exp_illegal_upper_bound () {
bb0:
  l1#1 = call #new-object#():list
  #3 = call #array-add-last#(l1#1, 1#2)
  #5 = call #array-add-last#(l1#1, 2#4)
  #7 = call #array-add-last#(l1#1, 3#6)
  #9 = call #array-add-last#(l1#1, 4#8)
  #11 = call #array-add-last#(l1#1, 5#10)
  l2#12 = call #unknown-expression#()
  return l2#12
}
slice_expressions.slice_2d_array () {
bb0:
  l1#1 = call #new-object#():list
  #2 = call #new-object#():list
  #4 = call #array-add-last#(#2, 1#3)
  #6 = call #array-add-last#(#2, 2#5)
  #7 = call #array-add-last#(l1#1, #2)
  #8 = call #new-object#():list
  #10 = call #array-add-last#(#8, 3#9)
  #12 = call #array-add-last#(#8, 4#11)
  #13 = call #array-add-last#(l1#1, #8)
  l2#14 = call #unknown-expression#()
  return l2#14
}
slice_expressions.slice_with_vars (a#1, b#2) {
bb0:
  l1#3 = call #new-object#():list
  #5 = call #array-add-last#(l1#3, 1#4)
  #7 = call #array-add-last#(l1#3, 2#6)
  #9 = call #array-add-last#(l1#3, 3#8)
  #11 = call #array-add-last#(l1#3, 4#10)
  l2#12 = call #unknown-expression#()
  return l2#12
}
slice_expressions.slice_with_unknown_list (l#1) {
bb0:
  l2#2 = call #new-object#():list
  #4 = call #array-read#(param l#1, 1#3)
  #5 = call #array-add-last#(l2#2, #4)
  return l2#2
}
