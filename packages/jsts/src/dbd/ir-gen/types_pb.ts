// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file types.proto (package sonarsource.ir, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';

/**
 * @generated from message sonarsource.ir.TypeDefinition
 */
export class TypeDefinition extends Message<TypeDefinition> {
  /**
   * @generated from field: string qualified_name = 1;
   */
  qualifiedName = '';

  /**
   * @generated from field: repeated sonarsource.ir.Method methods = 2;
   */
  methods: Method[] = [];

  /**
   * @generated from field: repeated string super_type_ids = 3;
   */
  superTypeIds: string[] = [];

  /**
   * @generated from field: bool has_incomplete_semantics = 4;
   */
  hasIncompleteSemantics = false;

  constructor(data?: PartialMessage<TypeDefinition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'sonarsource.ir.TypeDefinition';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'qualified_name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'methods', kind: 'message', T: Method, repeated: true },
    { no: 3, name: 'super_type_ids', kind: 'scalar', T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: 'has_incomplete_semantics', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TypeDefinition {
    return new TypeDefinition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TypeDefinition {
    return new TypeDefinition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TypeDefinition {
    return new TypeDefinition().fromJsonString(jsonString, options);
  }

  static equals(
    a: TypeDefinition | PlainMessage<TypeDefinition> | undefined,
    b: TypeDefinition | PlainMessage<TypeDefinition> | undefined,
  ): boolean {
    return proto3.util.equals(TypeDefinition, a, b);
  }
}

/**
 * @generated from message sonarsource.ir.Method
 */
export class Method extends Message<Method> {
  /**
   * @generated from field: string name = 1;
   */
  name = '';

  /**
   * @generated from field: string signature = 2;
   */
  signature = '';

  constructor(data?: PartialMessage<Method>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'sonarsource.ir.Method';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'signature', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Method {
    return new Method().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Method {
    return new Method().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Method {
    return new Method().fromJsonString(jsonString, options);
  }

  static equals(
    a: Method | PlainMessage<Method> | undefined,
    b: Method | PlainMessage<Method> | undefined,
  ): boolean {
    return proto3.util.equals(Method, a, b);
  }
}
