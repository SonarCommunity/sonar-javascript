diff --git a/node_modules/eslint/lib/api.js b/node_modules/eslint/lib/api.js
index a134ecd..15b4b98 100755
--- a/node_modules/eslint/lib/api.js
+++ b/node_modules/eslint/lib/api.js
@@ -11,7 +11,7 @@
 
 const { ESLint, shouldUseFlatConfig } = require("./eslint/eslint");
 const { LegacyESLint } = require("./eslint/legacy-eslint");
-const { Linter } = require("./linter");
+const { Linter, getDirectiveComments, applyDisableDirectives } = require("./linter");
 const { RuleTester } = require("./rule-tester");
 const { SourceCode } = require("./languages/js/source-code");
 
@@ -43,6 +43,8 @@ async function loadESLint({ useFlatConfig } = {}) {
 
 module.exports = {
     Linter,
+    getDirectiveComments,
+    applyDisableDirectives,
     loadESLint,
     ESLint,
     RuleTester,
diff --git a/node_modules/eslint/lib/config/flat-config-helpers.js b/node_modules/eslint/lib/config/flat-config-helpers.js
index a904a0d..195264c 100755
--- a/node_modules/eslint/lib/config/flat-config-helpers.js
+++ b/node_modules/eslint/lib/config/flat-config-helpers.js
@@ -32,6 +32,8 @@ const noOptionsSchema = Object.freeze({
  * @returns {{pluginName:string,ruleName:string}} The plugin and rule
  *      parts of the ruleId;
  */
+
+// interesting
 function parseRuleId(ruleId) {
     let pluginName, ruleName;
 
diff --git a/node_modules/eslint/lib/linter/index.js b/node_modules/eslint/lib/linter/index.js
index 9e53977..96b9357 100755
--- a/node_modules/eslint/lib/linter/index.js
+++ b/node_modules/eslint/lib/linter/index.js
@@ -2,10 +2,10 @@
 
 const { Linter } = require("./linter");
 const SourceCodeFixer = require("./source-code-fixer");
-
 module.exports = {
     Linter,
-
+    getDirectiveComments,
+    applyDisableDirectives,
     // For testers.
     SourceCodeFixer
 };
diff --git a/node_modules/eslint/lib/linter/linter.js b/node_modules/eslint/lib/linter/linter.js
index 007fcf4..5bf5ae1 100755
--- a/node_modules/eslint/lib/linter/linter.js
+++ b/node_modules/eslint/lib/linter/linter.js
@@ -2395,7 +2395,8 @@ class Linter {
 
 module.exports = {
     Linter,
-
+    getDirectiveComments,
+    applyDisableDirectives,
     /**
      * Get the internal slots of a given Linter instance for tests.
      * @param {Linter} instance The Linter instance to get.
diff --git a/node_modules/eslint/lib/types/index.d.ts b/node_modules/eslint/lib/types/index.d.ts
index b86ac2c..2c8aa5b 100755
--- a/node_modules/eslint/lib/types/index.d.ts
+++ b/node_modules/eslint/lib/types/index.d.ts
@@ -29,6 +29,8 @@ import * as ESTree from "estree";
 import { Language } from "@eslint/core";
 import { JSONSchema4 } from "json-schema";
 import { LegacyESLint } from "./use-at-your-own-risk.js";
+import { ESLint } from 'eslint';
+import ConfigData = ESLint.ConfigData;
 
 export namespace AST {
     type TokenType =
@@ -853,6 +855,28 @@ export namespace Rule {
 
 // #region Linter
 
+type Directives = {
+  type: 'disable' | 'enable' | 'disable-line' | 'disable-next-line',
+  line: number,
+  column: number,
+  ruleId: string | null
+  justification: string
+};
+
+export function getDirectiveComments(sourceCode: SourceCode, ruleMapper: (string) => Rule.RuleModule, warnInlineConfig: string | null, config: Linter.FlatConfig): {
+  configuredRules: { [name: string]: any[] }, enabledGlobals: { value: string, comment: ASTToken }[], exportedVariables: Object, problems: LintMessage[], disableDirectives: Directives[]
+};
+
+export function applyDisableDirectives(params: {
+  language: {
+    lineStart: 1,
+    columnStart: 0,
+  },
+  sourceCode: SourceCode,
+  directives: Directives[],
+  problems: LintMessage[],
+}): Linter.LintMessage[];
+
 export class Linter {
     static readonly version: string;
 
